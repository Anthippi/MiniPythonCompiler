/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AArrayStatement extends PStatement
{
    private final LinkedList _tab_ = new TypedLinkedList(new Tab_Cast());
    private PIdentifier _identifier_;
    private TLeftBracket _leftBracket_;
    private PExpression _e1_;
    private TRightBracket _rightBracket_;
    private TAssign _assign_;
    private PExpression _e2_;

    public AArrayStatement()
    {
    }

    public AArrayStatement(
        List _tab_,
        PIdentifier _identifier_,
        TLeftBracket _leftBracket_,
        PExpression _e1_,
        TRightBracket _rightBracket_,
        TAssign _assign_,
        PExpression _e2_)
    {
        {
            this._tab_.clear();
            this._tab_.addAll(_tab_);
        }

        setIdentifier(_identifier_);

        setLeftBracket(_leftBracket_);

        setE1(_e1_);

        setRightBracket(_rightBracket_);

        setAssign(_assign_);

        setE2(_e2_);

    }
    public Object clone()
    {
        return new AArrayStatement(
            cloneList(_tab_),
            (PIdentifier) cloneNode(_identifier_),
            (TLeftBracket) cloneNode(_leftBracket_),
            (PExpression) cloneNode(_e1_),
            (TRightBracket) cloneNode(_rightBracket_),
            (TAssign) cloneNode(_assign_),
            (PExpression) cloneNode(_e2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayStatement(this);
    }

    public LinkedList getTab()
    {
        return _tab_;
    }

    public void setTab(List list)
    {
        _tab_.clear();
        _tab_.addAll(list);
    }

    public PIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public TLeftBracket getLeftBracket()
    {
        return _leftBracket_;
    }

    public void setLeftBracket(TLeftBracket node)
    {
        if(_leftBracket_ != null)
        {
            _leftBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _leftBracket_ = node;
    }

    public PExpression getE1()
    {
        return _e1_;
    }

    public void setE1(PExpression node)
    {
        if(_e1_ != null)
        {
            _e1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _e1_ = node;
    }

    public TRightBracket getRightBracket()
    {
        return _rightBracket_;
    }

    public void setRightBracket(TRightBracket node)
    {
        if(_rightBracket_ != null)
        {
            _rightBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rightBracket_ = node;
    }

    public TAssign getAssign()
    {
        return _assign_;
    }

    public void setAssign(TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _assign_ = node;
    }

    public PExpression getE2()
    {
        return _e2_;
    }

    public void setE2(PExpression node)
    {
        if(_e2_ != null)
        {
            _e2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _e2_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_tab_)
            + toString(_identifier_)
            + toString(_leftBracket_)
            + toString(_e1_)
            + toString(_rightBracket_)
            + toString(_assign_)
            + toString(_e2_);
    }

    void removeChild(Node child)
    {
        if(_tab_.remove(child))
        {
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_leftBracket_ == child)
        {
            _leftBracket_ = null;
            return;
        }

        if(_e1_ == child)
        {
            _e1_ = null;
            return;
        }

        if(_rightBracket_ == child)
        {
            _rightBracket_ = null;
            return;
        }

        if(_assign_ == child)
        {
            _assign_ = null;
            return;
        }

        if(_e2_ == child)
        {
            _e2_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _tab_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        if(_leftBracket_ == oldChild)
        {
            setLeftBracket((TLeftBracket) newChild);
            return;
        }

        if(_e1_ == oldChild)
        {
            setE1((PExpression) newChild);
            return;
        }

        if(_rightBracket_ == oldChild)
        {
            setRightBracket((TRightBracket) newChild);
            return;
        }

        if(_assign_ == oldChild)
        {
            setAssign((TAssign) newChild);
            return;
        }

        if(_e2_ == oldChild)
        {
            setE2((PExpression) newChild);
            return;
        }

    }

    private class Tab_Cast implements Cast
    {
        public Object cast(Object o)
        {
            TTab node = (TTab) o;

            if((node.parent() != null) &&
                (node.parent() != AArrayStatement.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AArrayStatement.this))
            {
                node.parent(AArrayStatement.this);
            }

            return node;
        }
    }
}
