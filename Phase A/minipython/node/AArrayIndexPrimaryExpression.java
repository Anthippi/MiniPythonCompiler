/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AArrayIndexPrimaryExpression extends PPrimaryExpression
{
    private PIdentifier _identifier_;
    private TLeftBracket _leftBracket_;
    private PExpressionOperators _expressionOperators_;
    private TRightBracket _rightBracket_;

    public AArrayIndexPrimaryExpression()
    {
    }

    public AArrayIndexPrimaryExpression(
        PIdentifier _identifier_,
        TLeftBracket _leftBracket_,
        PExpressionOperators _expressionOperators_,
        TRightBracket _rightBracket_)
    {
        setIdentifier(_identifier_);

        setLeftBracket(_leftBracket_);

        setExpressionOperators(_expressionOperators_);

        setRightBracket(_rightBracket_);

    }
    public Object clone()
    {
        return new AArrayIndexPrimaryExpression(
            (PIdentifier) cloneNode(_identifier_),
            (TLeftBracket) cloneNode(_leftBracket_),
            (PExpressionOperators) cloneNode(_expressionOperators_),
            (TRightBracket) cloneNode(_rightBracket_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayIndexPrimaryExpression(this);
    }

    public PIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public TLeftBracket getLeftBracket()
    {
        return _leftBracket_;
    }

    public void setLeftBracket(TLeftBracket node)
    {
        if(_leftBracket_ != null)
        {
            _leftBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _leftBracket_ = node;
    }

    public PExpressionOperators getExpressionOperators()
    {
        return _expressionOperators_;
    }

    public void setExpressionOperators(PExpressionOperators node)
    {
        if(_expressionOperators_ != null)
        {
            _expressionOperators_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expressionOperators_ = node;
    }

    public TRightBracket getRightBracket()
    {
        return _rightBracket_;
    }

    public void setRightBracket(TRightBracket node)
    {
        if(_rightBracket_ != null)
        {
            _rightBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rightBracket_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_identifier_)
            + toString(_leftBracket_)
            + toString(_expressionOperators_)
            + toString(_rightBracket_);
    }

    void removeChild(Node child)
    {
        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_leftBracket_ == child)
        {
            _leftBracket_ = null;
            return;
        }

        if(_expressionOperators_ == child)
        {
            _expressionOperators_ = null;
            return;
        }

        if(_rightBracket_ == child)
        {
            _rightBracket_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        if(_leftBracket_ == oldChild)
        {
            setLeftBracket((TLeftBracket) newChild);
            return;
        }

        if(_expressionOperators_ == oldChild)
        {
            setExpressionOperators((PExpressionOperators) newChild);
            return;
        }

        if(_rightBracket_ == oldChild)
        {
            setRightBracket((TRightBracket) newChild);
            return;
        }

    }
}
