/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AAssertComparisonStatement extends PStatement
{
    private TAssert _assert_;
    private PComparison _comparison_;
    private PAdditionalExpression _additionalExpression_;

    public AAssertComparisonStatement()
    {
    }

    public AAssertComparisonStatement(
        TAssert _assert_,
        PComparison _comparison_,
        PAdditionalExpression _additionalExpression_)
    {
        setAssert(_assert_);

        setComparison(_comparison_);

        setAdditionalExpression(_additionalExpression_);

    }
    public Object clone()
    {
        return new AAssertComparisonStatement(
            (TAssert) cloneNode(_assert_),
            (PComparison) cloneNode(_comparison_),
            (PAdditionalExpression) cloneNode(_additionalExpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssertComparisonStatement(this);
    }

    public TAssert getAssert()
    {
        return _assert_;
    }

    public void setAssert(TAssert node)
    {
        if(_assert_ != null)
        {
            _assert_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _assert_ = node;
    }

    public PComparison getComparison()
    {
        return _comparison_;
    }

    public void setComparison(PComparison node)
    {
        if(_comparison_ != null)
        {
            _comparison_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comparison_ = node;
    }

    public PAdditionalExpression getAdditionalExpression()
    {
        return _additionalExpression_;
    }

    public void setAdditionalExpression(PAdditionalExpression node)
    {
        if(_additionalExpression_ != null)
        {
            _additionalExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _additionalExpression_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_assert_)
            + toString(_comparison_)
            + toString(_additionalExpression_);
    }

    void removeChild(Node child)
    {
        if(_assert_ == child)
        {
            _assert_ = null;
            return;
        }

        if(_comparison_ == child)
        {
            _comparison_ = null;
            return;
        }

        if(_additionalExpression_ == child)
        {
            _additionalExpression_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_assert_ == oldChild)
        {
            setAssert((TAssert) newChild);
            return;
        }

        if(_comparison_ == oldChild)
        {
            setComparison((PComparison) newChild);
            return;
        }

        if(_additionalExpression_ == oldChild)
        {
            setAdditionalExpression((PAdditionalExpression) newChild);
            return;
        }

    }
}
