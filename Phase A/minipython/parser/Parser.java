/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.parser;

import minipython.lexer.*;
import minipython.node.*;
import minipython.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
	this.nodeList = listNode;

        if(!stack.hasNext())
        {
            stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return (ArrayList) ((State) stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(lexer.next());
                        push(action[1], list);
                        last_shift = action[1];
                    }
		    break;
                case REDUCE:
                    switch(action[1])
                    {

                    case 0:
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;


                    case 1:
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;


                    case 2:
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;


                    case 3:
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;


                    case 4:
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;


                    case 5:
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;


                    case 6:
		    {
			ArrayList list = new6();
			push(goTo(3), list);
		    }
		    break;


                    case 7:
		    {
			ArrayList list = new7();
			push(goTo(3), list);
		    }
		    break;


                    case 8:
		    {
			ArrayList list = new8();
			push(goTo(3), list);
		    }
		    break;


                    case 9:
		    {
			ArrayList list = new9();
			push(goTo(3), list);
		    }
		    break;


                    case 10:
		    {
			ArrayList list = new10();
			push(goTo(4), list);
		    }
		    break;


                    case 11:
		    {
			ArrayList list = new11();
			push(goTo(5), list);
		    }
		    break;


                    case 12:
		    {
			ArrayList list = new12();
			push(goTo(5), list);
		    }
		    break;


                    case 13:
		    {
			ArrayList list = new13();
			push(goTo(6), list);
		    }
		    break;


                    case 14:
		    {
			ArrayList list = new14();
			push(goTo(6), list);
		    }
		    break;


                    case 15:
		    {
			ArrayList list = new15();
			push(goTo(6), list);
		    }
		    break;


                    case 16:
		    {
			ArrayList list = new16();
			push(goTo(6), list);
		    }
		    break;


                    case 17:
		    {
			ArrayList list = new17();
			push(goTo(6), list);
		    }
		    break;


                    case 18:
		    {
			ArrayList list = new18();
			push(goTo(6), list);
		    }
		    break;


                    case 19:
		    {
			ArrayList list = new19();
			push(goTo(6), list);
		    }
		    break;


                    case 20:
		    {
			ArrayList list = new20();
			push(goTo(6), list);
		    }
		    break;


                    case 21:
		    {
			ArrayList list = new21();
			push(goTo(6), list);
		    }
		    break;


                    case 22:
		    {
			ArrayList list = new22();
			push(goTo(6), list);
		    }
		    break;


                    case 23:
		    {
			ArrayList list = new23();
			push(goTo(6), list);
		    }
		    break;


                    case 24:
		    {
			ArrayList list = new24();
			push(goTo(6), list);
		    }
		    break;


                    case 25:
		    {
			ArrayList list = new25();
			push(goTo(6), list);
		    }
		    break;


                    case 26:
		    {
			ArrayList list = new26();
			push(goTo(6), list);
		    }
		    break;


                    case 27:
		    {
			ArrayList list = new27();
			push(goTo(6), list);
		    }
		    break;


                    case 28:
		    {
			ArrayList list = new28();
			push(goTo(6), list);
		    }
		    break;


                    case 29:
		    {
			ArrayList list = new29();
			push(goTo(6), list);
		    }
		    break;


                    case 30:
		    {
			ArrayList list = new30();
			push(goTo(6), list);
		    }
		    break;


                    case 31:
		    {
			ArrayList list = new31();
			push(goTo(6), list);
		    }
		    break;


                    case 32:
		    {
			ArrayList list = new32();
			push(goTo(6), list);
		    }
		    break;


                    case 33:
		    {
			ArrayList list = new33();
			push(goTo(6), list);
		    }
		    break;


                    case 34:
		    {
			ArrayList list = new34();
			push(goTo(6), list);
		    }
		    break;


                    case 35:
		    {
			ArrayList list = new35();
			push(goTo(6), list);
		    }
		    break;


                    case 36:
		    {
			ArrayList list = new36();
			push(goTo(6), list);
		    }
		    break;


                    case 37:
		    {
			ArrayList list = new37();
			push(goTo(6), list);
		    }
		    break;


                    case 38:
		    {
			ArrayList list = new38();
			push(goTo(6), list);
		    }
		    break;


                    case 39:
		    {
			ArrayList list = new39();
			push(goTo(7), list);
		    }
		    break;


                    case 40:
		    {
			ArrayList list = new40();
			push(goTo(7), list);
		    }
		    break;


                    case 41:
		    {
			ArrayList list = new41();
			push(goTo(7), list);
		    }
		    break;


                    case 42:
		    {
			ArrayList list = new42();
			push(goTo(7), list);
		    }
		    break;


                    case 43:
		    {
			ArrayList list = new43();
			push(goTo(7), list);
		    }
		    break;


                    case 44:
		    {
			ArrayList list = new44();
			push(goTo(8), list);
		    }
		    break;


                    case 45:
		    {
			ArrayList list = new45();
			push(goTo(8), list);
		    }
		    break;


                    case 46:
		    {
			ArrayList list = new46();
			push(goTo(8), list);
		    }
		    break;


                    case 47:
		    {
			ArrayList list = new47();
			push(goTo(9), list);
		    }
		    break;


                    case 48:
		    {
			ArrayList list = new48();
			push(goTo(9), list);
		    }
		    break;


                    case 49:
		    {
			ArrayList list = new49();
			push(goTo(9), list);
		    }
		    break;


                    case 50:
		    {
			ArrayList list = new50();
			push(goTo(9), list);
		    }
		    break;


                    case 51:
		    {
			ArrayList list = new51();
			push(goTo(10), list);
		    }
		    break;


                    case 52:
		    {
			ArrayList list = new52();
			push(goTo(10), list);
		    }
		    break;


                    case 53:
		    {
			ArrayList list = new53();
			push(goTo(11), list);
		    }
		    break;


                    case 54:
		    {
			ArrayList list = new54();
			push(goTo(11), list);
		    }
		    break;


                    case 55:
		    {
			ArrayList list = new55();
			push(goTo(11), list);
		    }
		    break;


                    case 56:
		    {
			ArrayList list = new56();
			push(goTo(11), list);
		    }
		    break;


                    case 57:
		    {
			ArrayList list = new57();
			push(goTo(11), list);
		    }
		    break;


                    case 58:
		    {
			ArrayList list = new58();
			push(goTo(12), list);
		    }
		    break;


                    case 59:
		    {
			ArrayList list = new59();
			push(goTo(12), list);
		    }
		    break;


                    case 60:
		    {
			ArrayList list = new60();
			push(goTo(12), list);
		    }
		    break;


                    case 61:
		    {
			ArrayList list = new61();
			push(goTo(12), list);
		    }
		    break;


                    case 62:
		    {
			ArrayList list = new62();
			push(goTo(12), list);
		    }
		    break;


                    case 63:
		    {
			ArrayList list = new63();
			push(goTo(12), list);
		    }
		    break;


                    case 64:
		    {
			ArrayList list = new64();
			push(goTo(12), list);
		    }
		    break;


                    case 65:
		    {
			ArrayList list = new65();
			push(goTo(12), list);
		    }
		    break;


                    case 66:
		    {
			ArrayList list = new66();
			push(goTo(12), list);
		    }
		    break;


                    case 67:
		    {
			ArrayList list = new67();
			push(goTo(13), list);
		    }
		    break;


                    case 68:
		    {
			ArrayList list = new68();
			push(goTo(13), list);
		    }
		    break;


                    case 69:
		    {
			ArrayList list = new69();
			push(goTo(13), list);
		    }
		    break;


                    case 70:
		    {
			ArrayList list = new70();
			push(goTo(13), list);
		    }
		    break;


                    case 71:
		    {
			ArrayList list = new71();
			push(goTo(13), list);
		    }
		    break;


                    case 72:
		    {
			ArrayList list = new72();
			push(goTo(13), list);
		    }
		    break;


                    case 73:
		    {
			ArrayList list = new73();
			push(goTo(13), list);
		    }
		    break;


                    case 74:
		    {
			ArrayList list = new74();
			push(goTo(13), list);
		    }
		    break;


                    case 75:
		    {
			ArrayList list = new75();
			push(goTo(14), list);
		    }
		    break;


                    case 76:
		    {
			ArrayList list = new76();
			push(goTo(15), list);
		    }
		    break;


                    case 77:
		    {
			ArrayList list = new77();
			push(goTo(15), list);
		    }
		    break;


                    case 78:
		    {
			ArrayList list = new78();
			push(goTo(16), list);
		    }
		    break;


                    case 79:
		    {
			ArrayList list = new79();
			push(goTo(16), list);
		    }
		    break;


                    case 80:
		    {
			ArrayList list = new80();
			push(goTo(17), list);
		    }
		    break;


                    case 81:
		    {
			ArrayList list = new81();
			push(goTo(17), list);
		    }
		    break;


                    case 82:
		    {
			ArrayList list = new82();
			push(goTo(18), list);
		    }
		    break;


                    case 83:
		    {
			ArrayList list = new83();
			push(goTo(19), list);
		    }
		    break;


                    case 84:
		    {
			ArrayList list = new84();
			push(goTo(19), list);
		    }
		    break;


                    case 85:
		    {
			ArrayList list = new85();
			push(goTo(20), list);
		    }
		    break;


                    case 86:
		    {
			ArrayList list = new86();
			push(goTo(20), list);
		    }
		    break;


                    case 87:
		    {
			ArrayList list = new87();
			push(goTo(21), list);
		    }
		    break;


                    case 88:
		    {
			ArrayList list = new88();
			push(goTo(21), list);
		    }
		    break;


                    case 89:
		    {
			ArrayList list = new89();
			push(goTo(22), list);
		    }
		    break;


                    case 90:
		    {
			ArrayList list = new90();
			push(goTo(22), list);
		    }
		    break;


                    case 91:
		    {
			ArrayList list = new91();
			push(goTo(22), list);
		    }
		    break;


                    case 92:
		    {
			ArrayList list = new92();
			push(goTo(22), list);
		    }
		    break;


                    case 93:
		    {
			ArrayList list = new93();
			push(goTo(23), list);
		    }
		    break;


                    case 94:
		    {
			ArrayList list = new94();
			push(goTo(23), list);
		    }
		    break;


                    case 95:
		    {
			ArrayList list = new95();
			push(goTo(23), list);
		    }
		    break;


                    case 96:
		    {
			ArrayList list = new96();
			push(goTo(23), list);
		    }
		    break;


                    case 97:
		    {
			ArrayList list = new97();
			push(goTo(23), list);
		    }
		    break;


                    case 98:
		    {
			ArrayList list = new98();
			push(goTo(23), list);
		    }
		    break;


                    case 99:
		    {
			ArrayList list = new99();
			push(goTo(24), list);
		    }
		    break;


                    case 100:
		    {
			ArrayList list = new100();
			push(goTo(24), list);
		    }
		    break;


                    case 101:
		    {
			ArrayList list = new101();
			push(goTo(25), list);
		    }
		    break;


                    case 102:
		    {
			ArrayList list = new102();
			push(goTo(25), list);
		    }
		    break;


                    case 103:
		    {
			ArrayList list = new103();
			push(goTo(26), list);
		    }
		    break;


                    case 104:
		    {
			ArrayList list = new104();
			push(goTo(26), list);
		    }
		    break;


                    case 105:
		    {
			ArrayList list = new105();
			push(goTo(26), list);
		    }
		    break;


                    case 106:
		    {
			ArrayList list = new106();
			push(goTo(26), list);
		    }
		    break;


                    case 107:
		    {
			ArrayList list = new107();
			push(goTo(26), list);
		    }
		    break;


                    case 108:
		    {
			ArrayList list = new108();
			push(goTo(27), list);
		    }
		    break;


                    case 109:
		    {
			ArrayList list = new109();
			push(goTo(28), list);
		    }
		    break;


                    case 110:
		    {
			ArrayList list = new110();
			push(goTo(29), list);
		    }
		    break;


                    case 111:
		    {
			ArrayList list = new111();
			push(goTo(30), list);
		    }
		    break;


                    case 112:
		    {
			ArrayList list = new112();
			push(goTo(31), list);
		    }
		    break;


                    case 113:
		    {
			ArrayList list = new113();
			push(goTo(31), list);
		    }
		    break;


                    case 114:
		    {
			ArrayList list = new114();
			push(goTo(32), list);
		    }
		    break;


                    case 115:
		    {
			ArrayList list = new115();
			push(goTo(32), list);
		    }
		    break;


                    case 116:
		    {
			ArrayList list = new116();
			push(goTo(33), list);
		    }
		    break;


                    case 117:
		    {
			ArrayList list = new117();
			push(goTo(33), list);
		    }
		    break;


                    case 118:
		    {
			ArrayList list = new118();
			push(goTo(34), list);
		    }
		    break;


                    case 119:
		    {
			ArrayList list = new119();
			push(goTo(34), list);
		    }
		    break;


                    case 120:
		    {
			ArrayList list = new120();
			push(goTo(35), list);
		    }
		    break;


                    case 121:
		    {
			ArrayList list = new121();
			push(goTo(35), list);
		    }
		    break;


                    case 122:
		    {
			ArrayList list = new122();
			push(goTo(36), list);
		    }
		    break;


                    case 123:
		    {
			ArrayList list = new123();
			push(goTo(36), list);
		    }
		    break;


                    case 124:
		    {
			ArrayList list = new124();
			push(goTo(37), list);
		    }
		    break;


                    case 125:
		    {
			ArrayList list = new125();
			push(goTo(37), list);
		    }
		    break;


                    case 126:
		    {
			ArrayList list = new126();
			push(goTo(38), list);
		    }
		    break;


                    case 127:
		    {
			ArrayList list = new127();
			push(goTo(38), list);
		    }
		    break;

                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PGoal node1 = (PGoal) ((ArrayList)pop()).get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }



    ArrayList new0()
    {
        ArrayList nodeList = new ArrayList();

        PGoal pgoalNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        }

        pgoalNode1 = new AGoal(listNode2);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new1()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGoal pgoalNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pgoalNode1 = new AGoal(listNode3);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new2()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionOrStatement pfunctionorstatementNode1;
        {
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pfunctionorstatementNode1 = new AFuncFunctionOrStatement(pfunctionNode2);
        }
	nodeList.add(pfunctionorstatementNode1);
        return nodeList;
    }



    ArrayList new3()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionOrStatement pfunctionorstatementNode1;
        {
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pfunctionorstatementNode1 = new AStatFunctionOrStatement(pstatementNode2);
        }
	nodeList.add(pfunctionorstatementNode1);
        return nodeList;
    }



    ArrayList new4()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TDef tdefNode2;
        PIdentifier pidentifierNode3;
        TLeftParenthesis tleftparenthesisNode4;
        Object nullNode5 = null;
        TRightParenthesis trightparenthesisNode6;
        TColon tcolonNode7;
        PStatement pstatementNode8;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        tleftparenthesisNode4 = (TLeftParenthesis)nodeArrayList3.get(0);
        trightparenthesisNode6 = (TRightParenthesis)nodeArrayList4.get(0);
        tcolonNode7 = (TColon)nodeArrayList5.get(0);
        pstatementNode8 = (PStatement)nodeArrayList6.get(0);

        pfunctionNode1 = new AFunction(tdefNode2, pidentifierNode3, tleftparenthesisNode4, null, trightparenthesisNode6, tcolonNode7, pstatementNode8);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new5()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TDef tdefNode2;
        PIdentifier pidentifierNode3;
        TLeftParenthesis tleftparenthesisNode4;
        PArgument pargumentNode5;
        TRightParenthesis trightparenthesisNode6;
        TColon tcolonNode7;
        PStatement pstatementNode8;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        tleftparenthesisNode4 = (TLeftParenthesis)nodeArrayList3.get(0);
        pargumentNode5 = (PArgument)nodeArrayList4.get(0);
        trightparenthesisNode6 = (TRightParenthesis)nodeArrayList5.get(0);
        tcolonNode7 = (TColon)nodeArrayList6.get(0);
        pstatementNode8 = (PStatement)nodeArrayList7.get(0);

        pfunctionNode1 = new AFunction(tdefNode2, pidentifierNode3, tleftparenthesisNode4, pargumentNode5, trightparenthesisNode6, tcolonNode7, pstatementNode8);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new6()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        PIdentifier pidentifierNode2;
        Object nullNode3 = null;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        {
        }

        pargumentNode1 = new AArgument(pidentifierNode2, null, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new7()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        PIdentifier pidentifierNode2;
        PArgumentAssign pargumentassignNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        pargumentassignNode3 = (PArgumentAssign)nodeArrayList2.get(0);
        {
        }

        pargumentNode1 = new AArgument(pidentifierNode2, pargumentassignNode3, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new8()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        PIdentifier pidentifierNode2;
        Object nullNode3 = null;
        TypedLinkedList listNode5 = new TypedLinkedList();
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargumentNode1 = new AArgument(pidentifierNode2, null, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new9()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        PIdentifier pidentifierNode2;
        PArgumentAssign pargumentassignNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        pargumentassignNode3 = (PArgumentAssign)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargumentNode1 = new AArgument(pidentifierNode2, pargumentassignNode3, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new10()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgumentAssign pargumentassignNode1;
        {
        TAssign tassignNode2;
        PValue pvalueNode3;
        tassignNode2 = (TAssign)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        pargumentassignNode1 = new AArgumentAssign(tassignNode2, pvalueNode3);
        }
	nodeList.add(pargumentassignNode1);
        return nodeList;
    }



    ArrayList new11()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgumentAdditionalAssign pargumentadditionalassignNode1;
        {
        TComa tcomaNode2;
        PIdentifier pidentifierNode3;
        Object nullNode4 = null;
        tcomaNode2 = (TComa)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);

        pargumentadditionalassignNode1 = new AArgumentAdditionalAssign(tcomaNode2, pidentifierNode3, null);
        }
	nodeList.add(pargumentadditionalassignNode1);
        return nodeList;
    }



    ArrayList new12()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgumentAdditionalAssign pargumentadditionalassignNode1;
        {
        TComa tcomaNode2;
        PIdentifier pidentifierNode3;
        PArgumentAssign pargumentassignNode4;
        tcomaNode2 = (TComa)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        pargumentassignNode4 = (PArgumentAssign)nodeArrayList3.get(0);

        pargumentadditionalassignNode1 = new AArgumentAdditionalAssign(tcomaNode2, pidentifierNode3, pargumentassignNode4);
        }
	nodeList.add(pargumentadditionalassignNode1);
        return nodeList;
    }



    ArrayList new13()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TIf tifNode3;
        PComparison pcomparisonNode4;
        TColon tcolonNode5;
        PStatement pstatementNode6;
        {
        }
        tifNode3 = (TIf)nodeArrayList1.get(0);
        pcomparisonNode4 = (PComparison)nodeArrayList2.get(0);
        tcolonNode5 = (TColon)nodeArrayList3.get(0);
        pstatementNode6 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AIfStatement(listNode2, tifNode3, pcomparisonNode4, tcolonNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new14()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TIf tifNode4;
        PComparison pcomparisonNode5;
        TColon tcolonNode6;
        PStatement pstatementNode7;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tifNode4 = (TIf)nodeArrayList2.get(0);
        pcomparisonNode5 = (PComparison)nodeArrayList3.get(0);
        tcolonNode6 = (TColon)nodeArrayList4.get(0);
        pstatementNode7 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(listNode3, tifNode4, pcomparisonNode5, tcolonNode6, pstatementNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new15()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TWhile twhileNode3;
        PComparison pcomparisonNode4;
        TColon tcolonNode5;
        PStatement pstatementNode6;
        {
        }
        twhileNode3 = (TWhile)nodeArrayList1.get(0);
        pcomparisonNode4 = (PComparison)nodeArrayList2.get(0);
        tcolonNode5 = (TColon)nodeArrayList3.get(0);
        pstatementNode6 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AWhileStatement(listNode2, twhileNode3, pcomparisonNode4, tcolonNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new16()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TWhile twhileNode4;
        PComparison pcomparisonNode5;
        TColon tcolonNode6;
        PStatement pstatementNode7;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        twhileNode4 = (TWhile)nodeArrayList2.get(0);
        pcomparisonNode5 = (PComparison)nodeArrayList3.get(0);
        tcolonNode6 = (TColon)nodeArrayList4.get(0);
        pstatementNode7 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(listNode3, twhileNode4, pcomparisonNode5, tcolonNode6, pstatementNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new17()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TFor tforNode3;
        PIdentifier pidentifierNode4;
        TIn tinNode5;
        PIdentifier pidentifierNode6;
        TColon tcolonNode7;
        PStatement pstatementNode8;
        {
        }
        tforNode3 = (TFor)nodeArrayList1.get(0);
        pidentifierNode4 = (PIdentifier)nodeArrayList2.get(0);
        tinNode5 = (TIn)nodeArrayList3.get(0);
        pidentifierNode6 = (PIdentifier)nodeArrayList4.get(0);
        tcolonNode7 = (TColon)nodeArrayList5.get(0);
        pstatementNode8 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new AForStatement(listNode2, tforNode3, pidentifierNode4, tinNode5, pidentifierNode6, tcolonNode7, pstatementNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new18()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TFor tforNode4;
        PIdentifier pidentifierNode5;
        TIn tinNode6;
        PIdentifier pidentifierNode7;
        TColon tcolonNode8;
        PStatement pstatementNode9;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tforNode4 = (TFor)nodeArrayList2.get(0);
        pidentifierNode5 = (PIdentifier)nodeArrayList3.get(0);
        tinNode6 = (TIn)nodeArrayList4.get(0);
        pidentifierNode7 = (PIdentifier)nodeArrayList5.get(0);
        tcolonNode8 = (TColon)nodeArrayList6.get(0);
        pstatementNode9 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AForStatement(listNode3, tforNode4, pidentifierNode5, tinNode6, pidentifierNode7, tcolonNode8, pstatementNode9);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new19()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TReturn treturnNode3;
        PExpression pexpressionNode4;
        {
        }
        treturnNode3 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(listNode2, treturnNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new20()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TReturn treturnNode4;
        PExpression pexpressionNode5;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        treturnNode4 = (TReturn)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AReturnStatement(listNode3, treturnNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new21()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TPrint tprintNode3;
        PExpression pexpressionNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        {
        }
        tprintNode3 = (TPrint)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        {
        }

        pstatementNode1 = new APrintStatement(listNode2, tprintNode3, pexpressionNode4, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new22()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TPrint tprintNode4;
        PExpression pexpressionNode5;
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tprintNode4 = (TPrint)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        {
        }

        pstatementNode1 = new APrintStatement(listNode3, tprintNode4, pexpressionNode5, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new23()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TPrint tprintNode3;
        PExpression pexpressionNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        }
        tprintNode3 = (TPrint)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstatementNode1 = new APrintStatement(listNode2, tprintNode3, pexpressionNode4, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new24()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TPrint tprintNode4;
        PExpression pexpressionNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tprintNode4 = (TPrint)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pstatementNode1 = new APrintStatement(listNode3, tprintNode4, pexpressionNode5, listNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new25()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        PIdentifier pidentifierNode3;
        PAssignOpt passignoptNode4;
        PExpression pexpressionNode5;
        {
        }
        pidentifierNode3 = (PIdentifier)nodeArrayList1.get(0);
        passignoptNode4 = (PAssignOpt)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignStatement(listNode2, pidentifierNode3, passignoptNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new26()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        PIdentifier pidentifierNode4;
        PAssignOpt passignoptNode5;
        PExpression pexpressionNode6;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pidentifierNode4 = (PIdentifier)nodeArrayList2.get(0);
        passignoptNode5 = (PAssignOpt)nodeArrayList3.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AAssignStatement(listNode3, pidentifierNode4, passignoptNode5, pexpressionNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new27()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        PIdentifier pidentifierNode3;
        TLeftBracket tleftbracketNode4;
        PExpression pexpressionNode5;
        TRightBracket trightbracketNode6;
        TAssign tassignNode7;
        PExpression pexpressionNode8;
        {
        }
        pidentifierNode3 = (PIdentifier)nodeArrayList1.get(0);
        tleftbracketNode4 = (TLeftBracket)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        trightbracketNode6 = (TRightBracket)nodeArrayList4.get(0);
        tassignNode7 = (TAssign)nodeArrayList5.get(0);
        pexpressionNode8 = (PExpression)nodeArrayList6.get(0);

        pstatementNode1 = new AArrayStatement(listNode2, pidentifierNode3, tleftbracketNode4, pexpressionNode5, trightbracketNode6, tassignNode7, pexpressionNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new28()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        PIdentifier pidentifierNode4;
        TLeftBracket tleftbracketNode5;
        PExpression pexpressionNode6;
        TRightBracket trightbracketNode7;
        TAssign tassignNode8;
        PExpression pexpressionNode9;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pidentifierNode4 = (PIdentifier)nodeArrayList2.get(0);
        tleftbracketNode5 = (TLeftBracket)nodeArrayList3.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);
        trightbracketNode7 = (TRightBracket)nodeArrayList5.get(0);
        tassignNode8 = (TAssign)nodeArrayList6.get(0);
        pexpressionNode9 = (PExpression)nodeArrayList7.get(0);

        pstatementNode1 = new AArrayStatement(listNode3, pidentifierNode4, tleftbracketNode5, pexpressionNode6, trightbracketNode7, tassignNode8, pexpressionNode9);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new29()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TAssert tassertNode3;
        PExpression pexpressionNode4;
        Object nullNode5 = null;
        {
        }
        tassertNode3 = (TAssert)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AAssertStatement(listNode2, tassertNode3, pexpressionNode4, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new30()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TAssert tassertNode4;
        PExpression pexpressionNode5;
        Object nullNode6 = null;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tassertNode4 = (TAssert)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssertStatement(listNode3, tassertNode4, pexpressionNode5, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new31()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TAssert tassertNode3;
        PExpression pexpressionNode4;
        PAdditionalExpression padditionalexpressionNode5;
        {
        }
        tassertNode3 = (TAssert)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        padditionalexpressionNode5 = (PAdditionalExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssertStatement(listNode2, tassertNode3, pexpressionNode4, padditionalexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new32()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TAssert tassertNode4;
        PExpression pexpressionNode5;
        PAdditionalExpression padditionalexpressionNode6;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tassertNode4 = (TAssert)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        padditionalexpressionNode6 = (PAdditionalExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AAssertStatement(listNode3, tassertNode4, pexpressionNode5, padditionalexpressionNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new33()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TAssert tassertNode2;
        PComparison pcomparisonNode3;
        Object nullNode4 = null;
        tassertNode2 = (TAssert)nodeArrayList1.get(0);
        pcomparisonNode3 = (PComparison)nodeArrayList2.get(0);

        pstatementNode1 = new AAssertComparisonStatement(tassertNode2, pcomparisonNode3, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new34()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TAssert tassertNode2;
        PComparison pcomparisonNode3;
        PAdditionalExpression padditionalexpressionNode4;
        tassertNode2 = (TAssert)nodeArrayList1.get(0);
        pcomparisonNode3 = (PComparison)nodeArrayList2.get(0);
        padditionalexpressionNode4 = (PAdditionalExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssertComparisonStatement(tassertNode2, pcomparisonNode3, padditionalexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new35()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        PFunctionCall pfunctioncallNode3;
        {
        }
        pfunctioncallNode3 = (PFunctionCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFCallStatement(listNode2, pfunctioncallNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new36()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        PFunctionCall pfunctioncallNode4;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pfunctioncallNode4 = (PFunctionCall)nodeArrayList2.get(0);

        pstatementNode1 = new AFCallStatement(listNode3, pfunctioncallNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new37()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        PImport pimportNode3;
        {
        }
        pimportNode3 = (PImport)nodeArrayList1.get(0);

        pstatementNode1 = new AImportStatement(listNode2, pimportNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new38()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        PImport pimportNode4;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pimportNode4 = (PImport)nodeArrayList2.get(0);

        pstatementNode1 = new AImportStatement(listNode3, pimportNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new39()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAssignOpt passignoptNode1;
        {
        TAssign tassignNode2;
        tassignNode2 = (TAssign)nodeArrayList1.get(0);

        passignoptNode1 = new AEqAssignOpt(tassignNode2);
        }
	nodeList.add(passignoptNode1);
        return nodeList;
    }



    ArrayList new40()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAssignOpt passignoptNode1;
        {
        TPlusEqual tplusequalNode2;
        tplusequalNode2 = (TPlusEqual)nodeArrayList1.get(0);

        passignoptNode1 = new APlusEqAssignOpt(tplusequalNode2);
        }
	nodeList.add(passignoptNode1);
        return nodeList;
    }



    ArrayList new41()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAssignOpt passignoptNode1;
        {
        TMinusEqual tminusequalNode2;
        tminusequalNode2 = (TMinusEqual)nodeArrayList1.get(0);

        passignoptNode1 = new AMinusEqAssignOpt(tminusequalNode2);
        }
	nodeList.add(passignoptNode1);
        return nodeList;
    }



    ArrayList new42()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAssignOpt passignoptNode1;
        {
        TDivideEqual tdivideequalNode2;
        tdivideequalNode2 = (TDivideEqual)nodeArrayList1.get(0);

        passignoptNode1 = new ADivEqAssignOpt(tdivideequalNode2);
        }
	nodeList.add(passignoptNode1);
        return nodeList;
    }



    ArrayList new43()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAssignOpt passignoptNode1;
        {
        TMultEqual tmultequalNode2;
        tmultequalNode2 = (TMultEqual)nodeArrayList1.get(0);

        passignoptNode1 = new AMultEqAssignOpt(tmultequalNode2);
        }
	nodeList.add(passignoptNode1);
        return nodeList;
    }



    ArrayList new44()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        pexpressionNode1 = new AFactorExpression(pfactorNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new45()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        TPlus tplusNode3;
        PFactor pfactorNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexpressionNode1 = new AAdditionExpression(pexpressionNode2, tplusNode3, pfactorNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new46()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        TMinus tminusNode3;
        PFactor pfactorNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexpressionNode1 = new ASubtractionExpression(pexpressionNode2, tminusNode3, pfactorNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new47()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFactor pfactorNode1;
        {
        PExponent pexponentNode2;
        pexponentNode2 = (PExponent)nodeArrayList1.get(0);

        pfactorNode1 = new AExponentFactor(pexponentNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    ArrayList new48()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFactor pfactorNode1;
        {
        PFactor pfactorNode2;
        TTimes ttimesNode3;
        PExponent pexponentNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        ttimesNode3 = (TTimes)nodeArrayList2.get(0);
        pexponentNode4 = (PExponent)nodeArrayList3.get(0);

        pfactorNode1 = new AMultFactor(pfactorNode2, ttimesNode3, pexponentNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    ArrayList new49()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFactor pfactorNode1;
        {
        PFactor pfactorNode2;
        TDivide tdivideNode3;
        PExponent pexponentNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tdivideNode3 = (TDivide)nodeArrayList2.get(0);
        pexponentNode4 = (PExponent)nodeArrayList3.get(0);

        pfactorNode1 = new ADivFactor(pfactorNode2, tdivideNode3, pexponentNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    ArrayList new50()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFactor pfactorNode1;
        {
        PFactor pfactorNode2;
        TModulo tmoduloNode3;
        PExponent pexponentNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tmoduloNode3 = (TModulo)nodeArrayList2.get(0);
        pexponentNode4 = (PExponent)nodeArrayList3.get(0);

        pfactorNode1 = new AModFactor(pfactorNode2, tmoduloNode3, pexponentNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    ArrayList new51()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExponent pexponentNode1;
        {
        PExpressionOperators pexpressionoperatorsNode2;
        pexpressionoperatorsNode2 = (PExpressionOperators)nodeArrayList1.get(0);

        pexponentNode1 = new AExpressionOperatorsExponent(pexpressionoperatorsNode2);
        }
	nodeList.add(pexponentNode1);
        return nodeList;
    }



    ArrayList new52()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExponent pexponentNode1;
        {
        PExponent pexponentNode2;
        TPower tpowerNode3;
        PExpressionOperators pexpressionoperatorsNode4;
        pexponentNode2 = (PExponent)nodeArrayList1.get(0);
        tpowerNode3 = (TPower)nodeArrayList2.get(0);
        pexpressionoperatorsNode4 = (PExpressionOperators)nodeArrayList3.get(0);

        pexponentNode1 = new AExponentExponent(pexponentNode2, tpowerNode3, pexpressionoperatorsNode4);
        }
	nodeList.add(pexponentNode1);
        return nodeList;
    }



    ArrayList new53()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPrimaryExpression pprimaryexpressionNode1;
        {
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        pprimaryexpressionNode1 = new AValuePrimaryExpression(pvalueNode2);
        }
	nodeList.add(pprimaryexpressionNode1);
        return nodeList;
    }



    ArrayList new54()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPrimaryExpression pprimaryexpressionNode1;
        {
        PIdentifier pidentifierNode2;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);

        pprimaryexpressionNode1 = new AIdentifierPrimaryExpression(pidentifierNode2);
        }
	nodeList.add(pprimaryexpressionNode1);
        return nodeList;
    }



    ArrayList new55()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPrimaryExpression pprimaryexpressionNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pprimaryexpressionNode1 = new AFCallPrimaryExpression(pfunctioncallNode2);
        }
	nodeList.add(pprimaryexpressionNode1);
        return nodeList;
    }



    ArrayList new56()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPrimaryExpression pprimaryexpressionNode1;
        {
        PIdentifier pidentifierNode2;
        TLeftBracket tleftbracketNode3;
        PExpressionOperators pexpressionoperatorsNode4;
        TRightBracket trightbracketNode5;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        tleftbracketNode3 = (TLeftBracket)nodeArrayList2.get(0);
        pexpressionoperatorsNode4 = (PExpressionOperators)nodeArrayList3.get(0);
        trightbracketNode5 = (TRightBracket)nodeArrayList4.get(0);

        pprimaryexpressionNode1 = new AArrayIndexPrimaryExpression(pidentifierNode2, tleftbracketNode3, pexpressionoperatorsNode4, trightbracketNode5);
        }
	nodeList.add(pprimaryexpressionNode1);
        return nodeList;
    }



    ArrayList new57()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPrimaryExpression pprimaryexpressionNode1;
        {
        TLeftParenthesis tleftparenthesisNode2;
        PExpression pexpressionNode3;
        TRightParenthesis trightparenthesisNode4;
        tleftparenthesisNode2 = (TLeftParenthesis)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trightparenthesisNode4 = (TRightParenthesis)nodeArrayList3.get(0);

        pprimaryexpressionNode1 = new AParenthPrimaryExpression(tleftparenthesisNode2, pexpressionNode3, trightparenthesisNode4);
        }
	nodeList.add(pprimaryexpressionNode1);
        return nodeList;
    }



    ArrayList new58()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpressionOperators pexpressionoperatorsNode1;
        {
        PPrimaryExpression pprimaryexpressionNode2;
        pprimaryexpressionNode2 = (PPrimaryExpression)nodeArrayList1.get(0);

        pexpressionoperatorsNode1 = new APrimaryExpressionExpressionOperators(pprimaryexpressionNode2);
        }
	nodeList.add(pexpressionoperatorsNode1);
        return nodeList;
    }



    ArrayList new59()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpressionOperators pexpressionoperatorsNode1;
        {
        TLen tlenNode2;
        TLeftParenthesis tleftparenthesisNode3;
        PExpression pexpressionNode4;
        TRightParenthesis trightparenthesisNode5;
        tlenNode2 = (TLen)nodeArrayList1.get(0);
        tleftparenthesisNode3 = (TLeftParenthesis)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trightparenthesisNode5 = (TRightParenthesis)nodeArrayList4.get(0);

        pexpressionoperatorsNode1 = new ALengthExpressionOperators(tlenNode2, tleftparenthesisNode3, pexpressionNode4, trightparenthesisNode5);
        }
	nodeList.add(pexpressionoperatorsNode1);
        return nodeList;
    }



    ArrayList new60()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpressionOperators pexpressionoperatorsNode1;
        {
        TAscii tasciiNode2;
        TLeftParenthesis tleftparenthesisNode3;
        PIdentifier pidentifierNode4;
        TRightParenthesis trightparenthesisNode5;
        tasciiNode2 = (TAscii)nodeArrayList1.get(0);
        tleftparenthesisNode3 = (TLeftParenthesis)nodeArrayList2.get(0);
        pidentifierNode4 = (PIdentifier)nodeArrayList3.get(0);
        trightparenthesisNode5 = (TRightParenthesis)nodeArrayList4.get(0);

        pexpressionoperatorsNode1 = new AAsciiExpressionOperators(tasciiNode2, tleftparenthesisNode3, pidentifierNode4, trightparenthesisNode5);
        }
	nodeList.add(pexpressionoperatorsNode1);
        return nodeList;
    }



    ArrayList new61()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpressionOperators pexpressionoperatorsNode1;
        {
        TMax tmaxNode2;
        TLeftParenthesis tleftparenthesisNode3;
        PValue pvalueNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TRightParenthesis trightparenthesisNode6;
        tmaxNode2 = (TMax)nodeArrayList1.get(0);
        tleftparenthesisNode3 = (TLeftParenthesis)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);
        {
        }
        trightparenthesisNode6 = (TRightParenthesis)nodeArrayList4.get(0);

        pexpressionoperatorsNode1 = new AMaxExpressionOperators(tmaxNode2, tleftparenthesisNode3, pvalueNode4, listNode5, trightparenthesisNode6);
        }
	nodeList.add(pexpressionoperatorsNode1);
        return nodeList;
    }



    ArrayList new62()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpressionOperators pexpressionoperatorsNode1;
        {
        TMax tmaxNode2;
        TLeftParenthesis tleftparenthesisNode3;
        PValue pvalueNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TRightParenthesis trightparenthesisNode7;
        tmaxNode2 = (TMax)nodeArrayList1.get(0);
        tleftparenthesisNode3 = (TLeftParenthesis)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trightparenthesisNode7 = (TRightParenthesis)nodeArrayList5.get(0);

        pexpressionoperatorsNode1 = new AMaxExpressionOperators(tmaxNode2, tleftparenthesisNode3, pvalueNode4, listNode6, trightparenthesisNode7);
        }
	nodeList.add(pexpressionoperatorsNode1);
        return nodeList;
    }



    ArrayList new63()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpressionOperators pexpressionoperatorsNode1;
        {
        TMin tminNode2;
        TLeftParenthesis tleftparenthesisNode3;
        PValue pvalueNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TRightParenthesis trightparenthesisNode6;
        tminNode2 = (TMin)nodeArrayList1.get(0);
        tleftparenthesisNode3 = (TLeftParenthesis)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);
        {
        }
        trightparenthesisNode6 = (TRightParenthesis)nodeArrayList4.get(0);

        pexpressionoperatorsNode1 = new AMinExpressionOperators(tminNode2, tleftparenthesisNode3, pvalueNode4, listNode5, trightparenthesisNode6);
        }
	nodeList.add(pexpressionoperatorsNode1);
        return nodeList;
    }



    ArrayList new64()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpressionOperators pexpressionoperatorsNode1;
        {
        TMin tminNode2;
        TLeftParenthesis tleftparenthesisNode3;
        PValue pvalueNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TRightParenthesis trightparenthesisNode7;
        tminNode2 = (TMin)nodeArrayList1.get(0);
        tleftparenthesisNode3 = (TLeftParenthesis)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trightparenthesisNode7 = (TRightParenthesis)nodeArrayList5.get(0);

        pexpressionoperatorsNode1 = new AMinExpressionOperators(tminNode2, tleftparenthesisNode3, pvalueNode4, listNode6, trightparenthesisNode7);
        }
	nodeList.add(pexpressionoperatorsNode1);
        return nodeList;
    }



    ArrayList new65()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpressionOperators pexpressionoperatorsNode1;
        {
        TLeftBracket tleftbracketNode2;
        PValue pvalueNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TRightBracket trightbracketNode5;
        tleftbracketNode2 = (TLeftBracket)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
        {
        }
        trightbracketNode5 = (TRightBracket)nodeArrayList3.get(0);

        pexpressionoperatorsNode1 = new AArrayExpressionOperators(tleftbracketNode2, pvalueNode3, listNode4, trightbracketNode5);
        }
	nodeList.add(pexpressionoperatorsNode1);
        return nodeList;
    }



    ArrayList new66()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpressionOperators pexpressionoperatorsNode1;
        {
        TLeftBracket tleftbracketNode2;
        PValue pvalueNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TRightBracket trightbracketNode6;
        tleftbracketNode2 = (TLeftBracket)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trightbracketNode6 = (TRightBracket)nodeArrayList4.get(0);

        pexpressionoperatorsNode1 = new AArrayExpressionOperators(tleftbracketNode2, pvalueNode3, listNode5, trightbracketNode6);
        }
	nodeList.add(pexpressionoperatorsNode1);
        return nodeList;
    }



    ArrayList new67()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImport pimportNode1;
        {
        TTkImport ttkimportNode2;
        PModule pmoduleNode3;
        Object nullNode4 = null;
        TypedLinkedList listNode5 = new TypedLinkedList();
        ttkimportNode2 = (TTkImport)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        {
        }

        pimportNode1 = new AImportImport(ttkimportNode2, pmoduleNode3, null, listNode5);
        }
	nodeList.add(pimportNode1);
        return nodeList;
    }



    ArrayList new68()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImport pimportNode1;
        {
        TTkImport ttkimportNode2;
        PModule pmoduleNode3;
        PImportAsIdentifier pimportasidentifierNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        ttkimportNode2 = (TTkImport)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        pimportasidentifierNode4 = (PImportAsIdentifier)nodeArrayList3.get(0);
        {
        }

        pimportNode1 = new AImportImport(ttkimportNode2, pmoduleNode3, pimportasidentifierNode4, listNode5);
        }
	nodeList.add(pimportNode1);
        return nodeList;
    }



    ArrayList new69()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImport pimportNode1;
        {
        TTkImport ttkimportNode2;
        PModule pmoduleNode3;
        Object nullNode4 = null;
        TypedLinkedList listNode6 = new TypedLinkedList();
        ttkimportNode2 = (TTkImport)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pimportNode1 = new AImportImport(ttkimportNode2, pmoduleNode3, null, listNode6);
        }
	nodeList.add(pimportNode1);
        return nodeList;
    }



    ArrayList new70()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImport pimportNode1;
        {
        TTkImport ttkimportNode2;
        PModule pmoduleNode3;
        PImportAsIdentifier pimportasidentifierNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        ttkimportNode2 = (TTkImport)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        pimportasidentifierNode4 = (PImportAsIdentifier)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pimportNode1 = new AImportImport(ttkimportNode2, pmoduleNode3, pimportasidentifierNode4, listNode6);
        }
	nodeList.add(pimportNode1);
        return nodeList;
    }



    ArrayList new71()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImport pimportNode1;
        {
        TFrom tfromNode2;
        PModule pmoduleNode3;
        TTkImport ttkimportNode4;
        PIdentifier pidentifierNode5;
        Object nullNode6 = null;
        TypedLinkedList listNode7 = new TypedLinkedList();
        tfromNode2 = (TFrom)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        ttkimportNode4 = (TTkImport)nodeArrayList3.get(0);
        pidentifierNode5 = (PIdentifier)nodeArrayList4.get(0);
        {
        }

        pimportNode1 = new AFromImport(tfromNode2, pmoduleNode3, ttkimportNode4, pidentifierNode5, null, listNode7);
        }
	nodeList.add(pimportNode1);
        return nodeList;
    }



    ArrayList new72()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImport pimportNode1;
        {
        TFrom tfromNode2;
        PModule pmoduleNode3;
        TTkImport ttkimportNode4;
        PIdentifier pidentifierNode5;
        PImportAsIdentifier pimportasidentifierNode6;
        TypedLinkedList listNode7 = new TypedLinkedList();
        tfromNode2 = (TFrom)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        ttkimportNode4 = (TTkImport)nodeArrayList3.get(0);
        pidentifierNode5 = (PIdentifier)nodeArrayList4.get(0);
        pimportasidentifierNode6 = (PImportAsIdentifier)nodeArrayList5.get(0);
        {
        }

        pimportNode1 = new AFromImport(tfromNode2, pmoduleNode3, ttkimportNode4, pidentifierNode5, pimportasidentifierNode6, listNode7);
        }
	nodeList.add(pimportNode1);
        return nodeList;
    }



    ArrayList new73()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImport pimportNode1;
        {
        TFrom tfromNode2;
        PModule pmoduleNode3;
        TTkImport ttkimportNode4;
        PIdentifier pidentifierNode5;
        Object nullNode6 = null;
        TypedLinkedList listNode8 = new TypedLinkedList();
        tfromNode2 = (TFrom)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        ttkimportNode4 = (TTkImport)nodeArrayList3.get(0);
        pidentifierNode5 = (PIdentifier)nodeArrayList4.get(0);
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pimportNode1 = new AFromImport(tfromNode2, pmoduleNode3, ttkimportNode4, pidentifierNode5, null, listNode8);
        }
	nodeList.add(pimportNode1);
        return nodeList;
    }



    ArrayList new74()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImport pimportNode1;
        {
        TFrom tfromNode2;
        PModule pmoduleNode3;
        TTkImport ttkimportNode4;
        PIdentifier pidentifierNode5;
        PImportAsIdentifier pimportasidentifierNode6;
        TypedLinkedList listNode8 = new TypedLinkedList();
        tfromNode2 = (TFrom)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        ttkimportNode4 = (TTkImport)nodeArrayList3.get(0);
        pidentifierNode5 = (PIdentifier)nodeArrayList4.get(0);
        pimportasidentifierNode6 = (PImportAsIdentifier)nodeArrayList5.get(0);
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pimportNode1 = new AFromImport(tfromNode2, pmoduleNode3, ttkimportNode4, pidentifierNode5, pimportasidentifierNode6, listNode8);
        }
	nodeList.add(pimportNode1);
        return nodeList;
    }



    ArrayList new75()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportAsIdentifier pimportasidentifierNode1;
        {
        TAs tasNode2;
        PIdentifier pidentifierNode3;
        tasNode2 = (TAs)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);

        pimportasidentifierNode1 = new AImportAsIdentifier(tasNode2, pidentifierNode3);
        }
	nodeList.add(pimportasidentifierNode1);
        return nodeList;
    }



    ArrayList new76()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportAdditionalModule pimportadditionalmoduleNode1;
        {
        TComa tcomaNode2;
        PModule pmoduleNode3;
        Object nullNode4 = null;
        tcomaNode2 = (TComa)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);

        pimportadditionalmoduleNode1 = new AImportAdditionalModule(tcomaNode2, pmoduleNode3, null);
        }
	nodeList.add(pimportadditionalmoduleNode1);
        return nodeList;
    }



    ArrayList new77()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportAdditionalModule pimportadditionalmoduleNode1;
        {
        TComa tcomaNode2;
        PModule pmoduleNode3;
        PImportAsIdentifier pimportasidentifierNode4;
        tcomaNode2 = (TComa)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList2.get(0);
        pimportasidentifierNode4 = (PImportAsIdentifier)nodeArrayList3.get(0);

        pimportadditionalmoduleNode1 = new AImportAdditionalModule(tcomaNode2, pmoduleNode3, pimportasidentifierNode4);
        }
	nodeList.add(pimportadditionalmoduleNode1);
        return nodeList;
    }



    ArrayList new78()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportAdditionalFrom pimportadditionalfromNode1;
        {
        TComa tcomaNode2;
        PIdentifier pidentifierNode3;
        Object nullNode4 = null;
        tcomaNode2 = (TComa)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);

        pimportadditionalfromNode1 = new AImportAdditionalFrom(tcomaNode2, pidentifierNode3, null);
        }
	nodeList.add(pimportadditionalfromNode1);
        return nodeList;
    }



    ArrayList new79()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportAdditionalFrom pimportadditionalfromNode1;
        {
        TComa tcomaNode2;
        PIdentifier pidentifierNode3;
        PImportAsIdentifier pimportasidentifierNode4;
        tcomaNode2 = (TComa)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        pimportasidentifierNode4 = (PImportAsIdentifier)nodeArrayList3.get(0);

        pimportadditionalfromNode1 = new AImportAdditionalFrom(tcomaNode2, pidentifierNode3, pimportasidentifierNode4);
        }
	nodeList.add(pimportadditionalfromNode1);
        return nodeList;
    }



    ArrayList new80()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PModule pmoduleNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        PIdentifier pidentifierNode3;
        {
        }
        pidentifierNode3 = (PIdentifier)nodeArrayList1.get(0);

        pmoduleNode1 = new AModule(listNode2, pidentifierNode3);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    ArrayList new81()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PModule pmoduleNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        PIdentifier pidentifierNode4;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pidentifierNode4 = (PIdentifier)nodeArrayList2.get(0);

        pmoduleNode1 = new AModule(listNode3, pidentifierNode4);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    ArrayList new82()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PModuleDotIdentifier pmoduledotidentifierNode1;
        {
        PIdentifier pidentifierNode2;
        TDot tdotNode3;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);

        pmoduledotidentifierNode1 = new AModuleDotIdentifier(pidentifierNode2, tdotNode3);
        }
	nodeList.add(pmoduledotidentifierNode1);
        return nodeList;
    }



    ArrayList new83()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PComparison2 pcomparison2Node2;
        pcomparison2Node2 = (PComparison2)nodeArrayList1.get(0);

        pcomparisonNode1 = new AComparison(pcomparison2Node2);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new84()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PComparison pcomparisonNode2;
        TOr torNode3;
        PComparison2 pcomparison2Node4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pcomparison2Node4 = (PComparison2)nodeArrayList3.get(0);

        pcomparisonNode1 = new AOrComparison(pcomparisonNode2, torNode3, pcomparison2Node4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new85()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison2 pcomparison2Node1;
        {
        PComparison3 pcomparison3Node2;
        pcomparison3Node2 = (PComparison3)nodeArrayList1.get(0);

        pcomparison2Node1 = new AComparison2(pcomparison3Node2);
        }
	nodeList.add(pcomparison2Node1);
        return nodeList;
    }



    ArrayList new86()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison2 pcomparison2Node1;
        {
        PComparison2 pcomparison2Node2;
        TAnd tandNode3;
        PComparison3 pcomparison3Node4;
        pcomparison2Node2 = (PComparison2)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pcomparison3Node4 = (PComparison3)nodeArrayList3.get(0);

        pcomparison2Node1 = new AAndComparison2(pcomparison2Node2, tandNode3, pcomparison3Node4);
        }
	nodeList.add(pcomparison2Node1);
        return nodeList;
    }



    ArrayList new87()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison3 pcomparison3Node1;
        {
        PPrimaryComparison pprimarycomparisonNode2;
        pprimarycomparisonNode2 = (PPrimaryComparison)nodeArrayList1.get(0);

        pcomparison3Node1 = new APrimaryComparisonComparison3(pprimarycomparisonNode2);
        }
	nodeList.add(pcomparison3Node1);
        return nodeList;
    }



    ArrayList new88()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison3 pcomparison3Node1;
        {
        TNot tnotNode2;
        PComparison3 pcomparison3Node3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pcomparison3Node3 = (PComparison3)nodeArrayList2.get(0);

        pcomparison3Node1 = new ANotComparison3(tnotNode2, pcomparison3Node3);
        }
	nodeList.add(pcomparison3Node1);
        return nodeList;
    }



    ArrayList new89()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPrimaryComparison pprimarycomparisonNode1;
        {
        PExpression pexpressionNode2;
        PComparisonOpt pcomparisonoptNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pcomparisonoptNode3 = (PComparisonOpt)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pprimarycomparisonNode1 = new AExpressionPrimaryComparison(pexpressionNode2, pcomparisonoptNode3, pexpressionNode4);
        }
	nodeList.add(pprimarycomparisonNode1);
        return nodeList;
    }



    ArrayList new90()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPrimaryComparison pprimarycomparisonNode1;
        {
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pprimarycomparisonNode1 = new ATruePrimaryComparison(ttrueNode2);
        }
	nodeList.add(pprimarycomparisonNode1);
        return nodeList;
    }



    ArrayList new91()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPrimaryComparison pprimarycomparisonNode1;
        {
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pprimarycomparisonNode1 = new AFalsePrimaryComparison(tfalseNode2);
        }
	nodeList.add(pprimarycomparisonNode1);
        return nodeList;
    }



    ArrayList new92()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPrimaryComparison pprimarycomparisonNode1;
        {
        TLeftParenthesis tleftparenthesisNode2;
        PComparison pcomparisonNode3;
        TRightParenthesis trightparenthesisNode4;
        tleftparenthesisNode2 = (TLeftParenthesis)nodeArrayList1.get(0);
        pcomparisonNode3 = (PComparison)nodeArrayList2.get(0);
        trightparenthesisNode4 = (TRightParenthesis)nodeArrayList3.get(0);

        pprimarycomparisonNode1 = new AParPrimaryComparison(tleftparenthesisNode2, pcomparisonNode3, trightparenthesisNode4);
        }
	nodeList.add(pprimarycomparisonNode1);
        return nodeList;
    }



    ArrayList new93()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisonOpt pcomparisonoptNode1;
        {
        TGreaterThan tgreaterthanNode2;
        tgreaterthanNode2 = (TGreaterThan)nodeArrayList1.get(0);

        pcomparisonoptNode1 = new AGreaterComparisonOpt(tgreaterthanNode2);
        }
	nodeList.add(pcomparisonoptNode1);
        return nodeList;
    }



    ArrayList new94()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisonOpt pcomparisonoptNode1;
        {
        TLessThan tlessthanNode2;
        tlessthanNode2 = (TLessThan)nodeArrayList1.get(0);

        pcomparisonoptNode1 = new ALessComparisonOpt(tlessthanNode2);
        }
	nodeList.add(pcomparisonoptNode1);
        return nodeList;
    }



    ArrayList new95()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisonOpt pcomparisonoptNode1;
        {
        TGreaterEqual tgreaterequalNode2;
        tgreaterequalNode2 = (TGreaterEqual)nodeArrayList1.get(0);

        pcomparisonoptNode1 = new AGreaterEqualComparisonOpt(tgreaterequalNode2);
        }
	nodeList.add(pcomparisonoptNode1);
        return nodeList;
    }



    ArrayList new96()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisonOpt pcomparisonoptNode1;
        {
        TLessEqual tlessequalNode2;
        tlessequalNode2 = (TLessEqual)nodeArrayList1.get(0);

        pcomparisonoptNode1 = new ALessEqualComparisonOpt(tlessequalNode2);
        }
	nodeList.add(pcomparisonoptNode1);
        return nodeList;
    }



    ArrayList new97()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisonOpt pcomparisonoptNode1;
        {
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        pcomparisonoptNode1 = new AEqualComparisonOpt(tequalNode2);
        }
	nodeList.add(pcomparisonoptNode1);
        return nodeList;
    }



    ArrayList new98()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisonOpt pcomparisonoptNode1;
        {
        TNotEqual tnotequalNode2;
        tnotequalNode2 = (TNotEqual)nodeArrayList1.get(0);

        pcomparisonoptNode1 = new ANotEqualComparisonOpt(tnotequalNode2);
        }
	nodeList.add(pcomparisonoptNode1);
        return nodeList;
    }



    ArrayList new99()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        PIdentifier pidentifierNode2;
        TLeftParenthesis tleftparenthesisNode3;
        Object nullNode4 = null;
        TRightParenthesis trightparenthesisNode5;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        tleftparenthesisNode3 = (TLeftParenthesis)nodeArrayList2.get(0);
        trightparenthesisNode5 = (TRightParenthesis)nodeArrayList3.get(0);

        pfunctioncallNode1 = new AFunctionCall(pidentifierNode2, tleftparenthesisNode3, null, trightparenthesisNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new100()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        PIdentifier pidentifierNode2;
        TLeftParenthesis tleftparenthesisNode3;
        PArglist parglistNode4;
        TRightParenthesis trightparenthesisNode5;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        tleftparenthesisNode3 = (TLeftParenthesis)nodeArrayList2.get(0);
        parglistNode4 = (PArglist)nodeArrayList3.get(0);
        trightparenthesisNode5 = (TRightParenthesis)nodeArrayList4.get(0);

        pfunctioncallNode1 = new AFunctionCall(pidentifierNode2, tleftparenthesisNode3, parglistNode4, trightparenthesisNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new101()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        }

        parglistNode1 = new AArglist(pexpressionNode2, listNode3);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new102()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        parglistNode1 = new AArglist(pexpressionNode2, listNode4);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new103()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        PNumber pnumberNode2;
        pnumberNode2 = (PNumber)nodeArrayList1.get(0);

        pvalueNode1 = new ANumberValue(pnumberNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new104()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TDoubleQuote tdoublequoteNode2;
        TStringLiteralD tstringliteraldNode3;
        TDoubleQuote tdoublequoteNode4;
        tdoublequoteNode2 = (TDoubleQuote)nodeArrayList1.get(0);
        tstringliteraldNode3 = (TStringLiteralD)nodeArrayList2.get(0);
        tdoublequoteNode4 = (TDoubleQuote)nodeArrayList3.get(0);

        pvalueNode1 = new ADqStringValue(tdoublequoteNode2, tstringliteraldNode3, tdoublequoteNode4);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new105()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TSingleQuote tsinglequoteNode2;
        TStringLiteralS tstringliteralsNode3;
        TSingleQuote tsinglequoteNode4;
        tsinglequoteNode2 = (TSingleQuote)nodeArrayList1.get(0);
        tstringliteralsNode3 = (TStringLiteralS)nodeArrayList2.get(0);
        tsinglequoteNode4 = (TSingleQuote)nodeArrayList3.get(0);

        pvalueNode1 = new ASqStringValue(tsinglequoteNode2, tstringliteralsNode3, tsinglequoteNode4);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new106()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        PIdentifier pidentifierNode2;
        TDot tdotNode3;
        PFunctionCall pfunctioncallNode4;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pfunctioncallNode4 = (PFunctionCall)nodeArrayList3.get(0);

        pvalueNode1 = new AFuncValue(pidentifierNode2, tdotNode3, pfunctioncallNode4);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new107()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TNone tnoneNode2;
        tnoneNode2 = (TNone)nodeArrayList1.get(0);

        pvalueNode1 = new ANoneValue(tnoneNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new108()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PNumber pnumberNode1;
        {
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        pnumberNode1 = new ANumber(tnumNode2);
        }
	nodeList.add(pnumberNode1);
        return nodeList;
    }



    ArrayList new109()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PIdentifier pidentifierNode1;
        {
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pidentifierNode1 = new AIdentifier(tidNode2);
        }
	nodeList.add(pidentifierNode1);
        return nodeList;
    }



    ArrayList new110()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAdditionalExpression padditionalexpressionNode1;
        {
        TComa tcomaNode2;
        PExpression pexpressionNode3;
        tcomaNode2 = (TComa)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        padditionalexpressionNode1 = new AAdditionalExpression(tcomaNode2, pexpressionNode3);
        }
	nodeList.add(padditionalexpressionNode1);
        return nodeList;
    }



    ArrayList new111()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAdditionalValue padditionalvalueNode1;
        {
        TComa tcomaNode2;
        PValue pvalueNode3;
        tcomaNode2 = (TComa)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        padditionalvalueNode1 = new AAdditionalValue(tcomaNode2, pvalueNode3);
        }
	nodeList.add(padditionalvalueNode1);
        return nodeList;
    }



    ArrayList new112()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PFunctionOrStatement pfunctionorstatementNode1;
        pfunctionorstatementNode1 = (PFunctionOrStatement)nodeArrayList1.get(0);
	if(pfunctionorstatementNode1 != null)
	{
	  listNode2.add(pfunctionorstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new113()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PFunctionOrStatement pfunctionorstatementNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pfunctionorstatementNode2 = (PFunctionOrStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfunctionorstatementNode2 != null)
	{
	  listNode3.add(pfunctionorstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new114()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PArgumentAdditionalAssign pargumentadditionalassignNode1;
        pargumentadditionalassignNode1 = (PArgumentAdditionalAssign)nodeArrayList1.get(0);
	if(pargumentadditionalassignNode1 != null)
	{
	  listNode2.add(pargumentadditionalassignNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new115()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PArgumentAdditionalAssign pargumentadditionalassignNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pargumentadditionalassignNode2 = (PArgumentAdditionalAssign)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargumentadditionalassignNode2 != null)
	{
	  listNode3.add(pargumentadditionalassignNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new116()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        TTab ttabNode1;
        ttabNode1 = (TTab)nodeArrayList1.get(0);
	if(ttabNode1 != null)
	{
	  listNode2.add(ttabNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new117()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        TTab ttabNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        ttabNode2 = (TTab)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ttabNode2 != null)
	{
	  listNode3.add(ttabNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new118()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PAdditionalExpression padditionalexpressionNode1;
        padditionalexpressionNode1 = (PAdditionalExpression)nodeArrayList1.get(0);
	if(padditionalexpressionNode1 != null)
	{
	  listNode2.add(padditionalexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new119()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PAdditionalExpression padditionalexpressionNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        padditionalexpressionNode2 = (PAdditionalExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalexpressionNode2 != null)
	{
	  listNode3.add(padditionalexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new120()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PAdditionalValue padditionalvalueNode1;
        padditionalvalueNode1 = (PAdditionalValue)nodeArrayList1.get(0);
	if(padditionalvalueNode1 != null)
	{
	  listNode2.add(padditionalvalueNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new121()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PAdditionalValue padditionalvalueNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        padditionalvalueNode2 = (PAdditionalValue)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalvalueNode2 != null)
	{
	  listNode3.add(padditionalvalueNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new122()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PImportAdditionalModule pimportadditionalmoduleNode1;
        pimportadditionalmoduleNode1 = (PImportAdditionalModule)nodeArrayList1.get(0);
	if(pimportadditionalmoduleNode1 != null)
	{
	  listNode2.add(pimportadditionalmoduleNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new123()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PImportAdditionalModule pimportadditionalmoduleNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pimportadditionalmoduleNode2 = (PImportAdditionalModule)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pimportadditionalmoduleNode2 != null)
	{
	  listNode3.add(pimportadditionalmoduleNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new124()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PImportAdditionalFrom pimportadditionalfromNode1;
        pimportadditionalfromNode1 = (PImportAdditionalFrom)nodeArrayList1.get(0);
	if(pimportadditionalfromNode1 != null)
	{
	  listNode2.add(pimportadditionalfromNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new125()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PImportAdditionalFrom pimportadditionalfromNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pimportadditionalfromNode2 = (PImportAdditionalFrom)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pimportadditionalfromNode2 != null)
	{
	  listNode3.add(pimportadditionalfromNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new126()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PModuleDotIdentifier pmoduledotidentifierNode1;
        pmoduledotidentifierNode1 = (PModuleDotIdentifier)nodeArrayList1.get(0);
	if(pmoduledotidentifierNode1 != null)
	{
	  listNode2.add(pmoduledotidentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new127()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PModuleDotIdentifier pmoduledotidentifierNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pmoduledotidentifierNode2 = (PModuleDotIdentifier)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmoduledotidentifierNode2 != null)
	{
	  listNode3.add(pmoduledotidentifierNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {31, SHIFT, 2}, {33, SHIFT, 3}, {34, SHIFT, 4}, {35, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {39, SHIFT, 8}, {44, SHIFT, 9}, {46, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, REDUCE, 116}, },
			{{-1, ERROR, 2}, {3, SHIFT, 21}, {8, SHIFT, 22}, {10, SHIFT, 23}, {28, SHIFT, 24}, {29, SHIFT, 25}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 3}, {3, SHIFT, 21}, {8, SHIFT, 22}, {10, SHIFT, 23}, {28, SHIFT, 24}, {29, SHIFT, 25}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 4}, {47, SHIFT, 11}, },
			{{-1, ERROR, 5}, {47, SHIFT, 11}, },
			{{-1, ERROR, 6}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 7}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 8}, {3, SHIFT, 21}, {8, SHIFT, 22}, {10, SHIFT, 23}, {28, SHIFT, 24}, {29, SHIFT, 25}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 9}, {47, SHIFT, 11}, },
			{{-1, ERROR, 10}, {47, SHIFT, 11}, },
			{{-1, REDUCE, 109}, },
			{{-1, ERROR, 12}, {53, ACCEPT, -1}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 18}, {7, SHIFT, 60}, {8, SHIFT, 61}, {10, SHIFT, 62}, {24, SHIFT, 63}, {25, SHIFT, 64}, {26, SHIFT, 65}, {27, SHIFT, 66}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {31, SHIFT, 2}, {33, SHIFT, 3}, {34, SHIFT, 4}, {35, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {39, SHIFT, 8}, {44, SHIFT, 9}, {46, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, ERROR, 20}, {0, SHIFT, 69}, {31, SHIFT, 70}, {33, SHIFT, 71}, {34, SHIFT, 72}, {36, SHIFT, 73}, {37, SHIFT, 74}, {39, SHIFT, 75}, {44, SHIFT, 9}, {46, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, ERROR, 21}, {3, SHIFT, 21}, {8, SHIFT, 22}, {10, SHIFT, 23}, {28, SHIFT, 24}, {29, SHIFT, 25}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 22}, {3, SHIFT, 21}, {8, SHIFT, 22}, {10, SHIFT, 23}, {28, SHIFT, 24}, {29, SHIFT, 25}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 23}, {30, SHIFT, 26}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 107}, },
			{{-1, ERROR, 27}, {8, SHIFT, 84}, },
			{{-1, ERROR, 28}, {8, SHIFT, 85}, },
			{{-1, ERROR, 29}, {8, SHIFT, 86}, },
			{{-1, ERROR, 30}, {8, SHIFT, 87}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 32}, {51, SHIFT, 88}, },
			{{-1, ERROR, 33}, {52, SHIFT, 89}, },
			{{-1, ERROR, 34}, {12, SHIFT, 90}, {13, SHIFT, 91}, {14, SHIFT, 92}, {15, SHIFT, 93}, {16, SHIFT, 94}, {17, SHIFT, 95}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, REDUCE, 44}, {20, SHIFT, 99}, {21, SHIFT, 100}, {22, SHIFT, 101}, },
			{{-1, REDUCE, 47}, {23, SHIFT, 102}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 39}, {2, SHIFT, 103}, {4, SHIFT, 104}, },
			{{-1, REDUCE, 83}, {1, SHIFT, 105}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 54}, {6, SHIFT, 106}, {8, SHIFT, 61}, {10, SHIFT, 107}, },
			{{-1, ERROR, 47}, {2, SHIFT, 103}, {4, SHIFT, 108}, },
			{{-1, ERROR, 48}, {38, SHIFT, 109}, },
			{{-1, ERROR, 49}, {8, SHIFT, 110}, },
			{{-1, ERROR, 50}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, REDUCE, 19}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, REDUCE, 21}, {5, SHIFT, 112}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, REDUCE, 29}, {5, SHIFT, 112}, {12, SHIFT, 90}, {13, SHIFT, 91}, {14, SHIFT, 92}, {15, SHIFT, 93}, {16, SHIFT, 94}, {17, SHIFT, 95}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, REDUCE, 33}, {2, SHIFT, 103}, {5, SHIFT, 112}, },
			{{-1, REDUCE, 67}, {5, SHIFT, 117}, {45, SHIFT, 118}, },
			{{-1, REDUCE, 126}, },
			{{-1, REDUCE, 80}, {6, SHIFT, 122}, },
			{{-1, ERROR, 58}, {47, SHIFT, 11}, },
			{{-1, ERROR, 59}, {44, SHIFT, 125}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 61}, {8, SHIFT, 50}, {9, SHIFT, 126}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 62}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 67}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 117}, },
			{{-1, ERROR, 70}, {3, SHIFT, 21}, {8, SHIFT, 22}, {10, SHIFT, 23}, {28, SHIFT, 24}, {29, SHIFT, 25}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 71}, {3, SHIFT, 21}, {8, SHIFT, 22}, {10, SHIFT, 23}, {28, SHIFT, 24}, {29, SHIFT, 25}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 72}, {47, SHIFT, 11}, },
			{{-1, ERROR, 73}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 74}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 75}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 78}, {7, SHIFT, 60}, {8, SHIFT, 61}, {10, SHIFT, 137}, {24, SHIFT, 63}, {25, SHIFT, 64}, {26, SHIFT, 65}, {27, SHIFT, 66}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 80}, {9, SHIFT, 139}, {12, SHIFT, 90}, {13, SHIFT, 91}, {14, SHIFT, 92}, {15, SHIFT, 93}, {16, SHIFT, 94}, {17, SHIFT, 95}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, ERROR, 81}, {2, SHIFT, 103}, {9, SHIFT, 140}, },
			{{-1, ERROR, 82}, {5, SHIFT, 141}, {11, SHIFT, 142}, },
			{{-1, ERROR, 83}, {6, SHIFT, 106}, },
			{{-1, ERROR, 84}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 85}, {47, SHIFT, 11}, },
			{{-1, ERROR, 86}, {30, SHIFT, 26}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 87}, {30, SHIFT, 26}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 88}, {49, SHIFT, 149}, },
			{{-1, ERROR, 89}, {50, SHIFT, 150}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 96}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 97}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 98}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 99}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 100}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 101}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 102}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 103}, {3, SHIFT, 21}, {8, SHIFT, 22}, {10, SHIFT, 23}, {28, SHIFT, 24}, {29, SHIFT, 25}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 104}, {0, SHIFT, 1}, {31, SHIFT, 2}, {33, SHIFT, 3}, {34, SHIFT, 4}, {36, SHIFT, 6}, {37, SHIFT, 7}, {39, SHIFT, 8}, {44, SHIFT, 9}, {46, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, ERROR, 105}, {3, SHIFT, 21}, {8, SHIFT, 22}, {10, SHIFT, 23}, {28, SHIFT, 24}, {29, SHIFT, 25}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 106}, {47, SHIFT, 11}, },
			{{-1, ERROR, 107}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 108}, {0, SHIFT, 1}, {31, SHIFT, 2}, {33, SHIFT, 3}, {34, SHIFT, 4}, {36, SHIFT, 6}, {37, SHIFT, 7}, {39, SHIFT, 8}, {44, SHIFT, 9}, {46, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, ERROR, 109}, {47, SHIFT, 11}, },
			{{-1, ERROR, 110}, {9, SHIFT, 166}, {47, SHIFT, 11}, },
			{{-1, ERROR, 111}, {9, SHIFT, 139}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, ERROR, 112}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, REDUCE, 118}, },
			{{-1, REDUCE, 23}, {5, SHIFT, 112}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 117}, {47, SHIFT, 11}, },
			{{-1, ERROR, 118}, {47, SHIFT, 11}, },
			{{-1, REDUCE, 68}, {5, SHIFT, 117}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 69}, {5, SHIFT, 117}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 81}, {6, SHIFT, 122}, },
			{{-1, ERROR, 125}, {47, SHIFT, 11}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 101}, {5, SHIFT, 112}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, ERROR, 128}, {9, SHIFT, 177}, },
			{{-1, ERROR, 129}, {11, SHIFT, 178}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, REDUCE, 25}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, ERROR, 131}, {2, SHIFT, 103}, {4, SHIFT, 179}, },
			{{-1, ERROR, 132}, {2, SHIFT, 103}, {4, SHIFT, 180}, },
			{{-1, ERROR, 133}, {38, SHIFT, 181}, },
			{{-1, REDUCE, 20}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, REDUCE, 22}, {5, SHIFT, 112}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, REDUCE, 30}, {5, SHIFT, 112}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, ERROR, 137}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, ERROR, 138}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 141}, {30, SHIFT, 26}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 120}, },
			{{-1, ERROR, 144}, {5, SHIFT, 141}, {11, SHIFT, 187}, },
			{{-1, ERROR, 145}, {9, SHIFT, 189}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, ERROR, 146}, {9, SHIFT, 190}, },
			{{-1, ERROR, 147}, {5, SHIFT, 141}, {9, SHIFT, 191}, },
			{{-1, ERROR, 148}, {5, SHIFT, 141}, {9, SHIFT, 193}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 45}, {20, SHIFT, 99}, {21, SHIFT, 100}, {22, SHIFT, 101}, },
			{{-1, REDUCE, 46}, {20, SHIFT, 99}, {21, SHIFT, 100}, {22, SHIFT, 101}, },
			{{-1, REDUCE, 89}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, REDUCE, 48}, {23, SHIFT, 102}, },
			{{-1, REDUCE, 49}, {23, SHIFT, 102}, },
			{{-1, REDUCE, 50}, {23, SHIFT, 102}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 84}, {1, SHIFT, 105}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 162}, {8, SHIFT, 61}, },
			{{-1, ERROR, 163}, {11, SHIFT, 195}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 165}, {4, SHIFT, 196}, },
			{{-1, ERROR, 166}, {4, SHIFT, 197}, },
			{{-1, ERROR, 167}, {9, SHIFT, 198}, },
			{{-1, REDUCE, 6}, {5, SHIFT, 199}, {7, SHIFT, 200}, },
			{{-1, REDUCE, 110}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, REDUCE, 119}, },
			{{-1, REDUCE, 76}, {45, SHIFT, 118}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 70}, {5, SHIFT, 117}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 71}, {5, SHIFT, 205}, {45, SHIFT, 118}, },
			{{-1, REDUCE, 102}, {5, SHIFT, 112}, },
			{{-1, REDUCE, 100}, },
			{{-1, ERROR, 178}, {7, SHIFT, 209}, },
			{{-1, ERROR, 179}, {0, SHIFT, 1}, {31, SHIFT, 2}, {33, SHIFT, 3}, {34, SHIFT, 4}, {36, SHIFT, 6}, {37, SHIFT, 7}, {39, SHIFT, 8}, {44, SHIFT, 9}, {46, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, ERROR, 180}, {0, SHIFT, 1}, {31, SHIFT, 2}, {33, SHIFT, 3}, {34, SHIFT, 4}, {36, SHIFT, 6}, {37, SHIFT, 7}, {39, SHIFT, 8}, {44, SHIFT, 9}, {46, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, ERROR, 181}, {47, SHIFT, 11}, },
			{{-1, REDUCE, 24}, {5, SHIFT, 112}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 184}, {11, SHIFT, 213}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, REDUCE, 26}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 121}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 192}, {5, SHIFT, 141}, {9, SHIFT, 214}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 194}, {5, SHIFT, 141}, {9, SHIFT, 215}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 196}, {0, SHIFT, 1}, {31, SHIFT, 2}, {33, SHIFT, 3}, {34, SHIFT, 4}, {36, SHIFT, 6}, {37, SHIFT, 7}, {39, SHIFT, 8}, {44, SHIFT, 9}, {46, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, ERROR, 197}, {0, SHIFT, 1}, {31, SHIFT, 2}, {33, SHIFT, 3}, {34, SHIFT, 4}, {36, SHIFT, 6}, {37, SHIFT, 7}, {39, SHIFT, 8}, {44, SHIFT, 9}, {46, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, ERROR, 198}, {4, SHIFT, 218}, },
			{{-1, ERROR, 199}, {47, SHIFT, 11}, },
			{{-1, ERROR, 200}, {30, SHIFT, 26}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, REDUCE, 7}, {5, SHIFT, 199}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 8}, {5, SHIFT, 199}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 205}, {47, SHIFT, 11}, },
			{{-1, REDUCE, 72}, {5, SHIFT, 205}, },
			{{-1, REDUCE, 124}, },
			{{-1, REDUCE, 73}, {5, SHIFT, 205}, },
			{{-1, ERROR, 209}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 212}, {4, SHIFT, 227}, },
			{{-1, ERROR, 213}, {7, SHIFT, 228}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 218}, {0, SHIFT, 1}, {31, SHIFT, 2}, {33, SHIFT, 3}, {34, SHIFT, 4}, {36, SHIFT, 6}, {37, SHIFT, 7}, {39, SHIFT, 8}, {44, SHIFT, 9}, {46, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, REDUCE, 11}, {7, SHIFT, 200}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 9}, {5, SHIFT, 199}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 78}, {45, SHIFT, 118}, },
			{{-1, REDUCE, 74}, {5, SHIFT, 205}, },
			{{-1, REDUCE, 125}, },
			{{-1, REDUCE, 27}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
			{{-1, ERROR, 227}, {0, SHIFT, 1}, {31, SHIFT, 2}, {33, SHIFT, 3}, {34, SHIFT, 4}, {36, SHIFT, 6}, {37, SHIFT, 7}, {39, SHIFT, 8}, {44, SHIFT, 9}, {46, SHIFT, 10}, {47, SHIFT, 11}, },
			{{-1, ERROR, 228}, {8, SHIFT, 50}, {10, SHIFT, 23}, {30, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, {47, SHIFT, 11}, {48, SHIFT, 31}, {49, SHIFT, 32}, {50, SHIFT, 33}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 28}, {18, SHIFT, 96}, {19, SHIFT, 97}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 12}, },
			{{-1, 13}, {19, 68}, },
			{{-1, 14}, },
			{{-1, 167}, },
			{{-1, 201}, {219, 230}, },
			{{-1, 202}, {203, 222}, {221, 222}, },
			{{-1, 15}, {104, 159}, {108, 164}, {179, 210}, {180, 211}, {196, 216}, {197, 217}, {218, 229}, {227, 232}, },
			{{-1, 67}, {78, 138}, },
			{{-1, 34}, {6, 51}, {7, 52}, {8, 53}, {22, 80}, {50, 111}, {61, 127}, {62, 129}, {67, 130}, {73, 134}, {74, 135}, {75, 136}, {84, 145}, {98, 153}, {112, 169}, {137, 184}, {138, 185}, {209, 226}, {228, 233}, },
			{{-1, 35}, {96, 151}, {97, 152}, },
			{{-1, 36}, {99, 154}, {100, 155}, {101, 156}, },
			{{-1, 37}, },
			{{-1, 38}, {102, 157}, {107, 163}, },
			{{-1, 16}, {20, 76}, },
			{{-1, 119}, {171, 204}, {175, 206}, {223, 231}, },
			{{-1, 120}, {121, 174}, {173, 174}, },
			{{-1, 207}, {208, 225}, {224, 225}, },
			{{-1, 55}, {10, 59}, {117, 171}, },
			{{-1, 56}, {58, 123}, },
			{{-1, 39}, {3, 47}, {8, 54}, {22, 81}, {70, 131}, {71, 132}, },
			{{-1, 40}, {103, 158}, },
			{{-1, 41}, {21, 79}, {105, 160}, },
			{{-1, 42}, },
			{{-1, 98}, },
			{{-1, 43}, {0, 17}, {19, 17}, {20, 77}, {104, 17}, {106, 161}, {108, 17}, {179, 17}, {180, 17}, {196, 17}, {197, 17}, {218, 17}, {227, 17}, },
			{{-1, 128}, },
			{{-1, 44}, {23, 82}, {86, 147}, {87, 148}, {141, 186}, {200, 220}, },
			{{-1, 45}, },
			{{-1, 46}, {0, 18}, {4, 48}, {5, 49}, {9, 57}, {10, 57}, {19, 18}, {20, 78}, {23, 83}, {58, 124}, {72, 133}, {85, 146}, {86, 83}, {87, 83}, {104, 18}, {106, 162}, {108, 18}, {109, 165}, {110, 168}, {117, 57}, {118, 172}, {125, 175}, {141, 83}, {179, 18}, {180, 18}, {181, 212}, {196, 18}, {197, 18}, {199, 219}, {200, 83}, {205, 223}, {218, 18}, {227, 18}, },
			{{-1, 113}, {53, 115}, {54, 116}, {114, 170}, {136, 183}, {176, 170}, {182, 170}, },
			{{-1, 143}, {144, 188}, {192, 188}, {194, 188}, },
			{{-1, 19}, },
			{{-1, 203}, {201, 221}, },
			{{-1, 20}, },
			{{-1, 114}, {127, 176}, {135, 182}, },
			{{-1, 144}, {147, 192}, {148, 194}, },
			{{-1, 121}, {119, 173}, },
			{{-1, 208}, {206, 224}, },
			{{-1, 58}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: tab, 'if', 'while', 'for', 'def', 'return', 'print', 'assert', 'import', 'from', id, EOF",
			"expecting: tab, 'if', 'while', 'for', 'return', 'print', 'assert', 'import', 'from', id",
			"expecting: 'not', '(', '[', 'true', 'false', 'None', 'len', 'ascii', 'max', 'min', id, num, '"', '''",
			"expecting: id",
			"expecting: '(', '[', 'None', 'len', 'ascii', 'max', 'min', id, num, '"', '''",
			"expecting: tab, 'and', 'or', ':', ',', '.', '=', '(', ')', '[', ']', '>', '<=', '>=', '==', '!=', '<', '+', '-', '*', '/', '%', '**', '-=', '/=', '+=', '*=', 'if', 'while', 'for', 'def', 'return', 'print', 'in', 'assert', 'import', 'as', 'from', id, EOF",
			"expecting: EOF",
			"expecting: '=', '(', '[', '-=', '/=', '+=', '*='",
			"expecting: 'None', id, num, '"', '''",
			"expecting: tab, 'and', 'or', ':', ',', ')', 'if', 'while', 'for', 'def', 'return', 'print', 'assert', 'import', 'from', id, EOF",
			"expecting: tab, 'and', 'or', ':', ',', ')', ']', '>', '<=', '>=', '==', '!=', '<', '+', '-', '*', '/', '%', '**', 'if', 'while', 'for', 'def', 'return', 'print', 'assert', 'import', 'from', id, EOF",
			"expecting: '('",
			"expecting: string literal d",
			"expecting: string literal s",
			"expecting: '>', '<=', '>=', '==', '!=', '<', '+', '-'",
			"expecting: tab, 'and', 'or', ':', ',', ')', ']', '>', '<=', '>=', '==', '!=', '<', '+', '-', '*', '/', '%', 'if', 'while', 'for', 'def', 'return', 'print', 'assert', 'import', 'from', id, EOF",
			"expecting: 'or', ':'",
			"expecting: tab, 'and', 'or', ':', ',', '.', '(', ')', '[', ']', '>', '<=', '>=', '==', '!=', '<', '+', '-', '*', '/', '%', '**', 'if', 'while', 'for', 'def', 'return', 'print', 'assert', 'import', 'from', id, EOF",
			"expecting: 'in'",
			"expecting: tab, '+', '-', 'if', 'while', 'for', 'def', 'return', 'print', 'assert', 'import', 'from', id, EOF",
			"expecting: tab, ',', '+', '-', 'if', 'while', 'for', 'def', 'return', 'print', 'assert', 'import', 'from', id, EOF",
			"expecting: tab, ',', '>', '<=', '>=', '==', '!=', '<', '+', '-', 'if', 'while', 'for', 'def', 'return', 'print', 'assert', 'import', 'from', id, EOF",
			"expecting: tab, 'or', ',', 'if', 'while', 'for', 'def', 'return', 'print', 'assert', 'import', 'from', id, EOF",
			"expecting: tab, ',', 'if', 'while', 'for', 'def', 'return', 'print', 'assert', 'import', 'as', 'from', id, EOF",
			"expecting: tab, ',', '.', 'if', 'while', 'for', 'def', 'return', 'print', 'assert', 'import', 'as', 'from', id, EOF",
			"expecting: 'import'",
			"expecting: '(', ')', '[', 'None', 'len', 'ascii', 'max', 'min', id, num, '"', '''",
			"expecting: ')', '>', '<=', '>=', '==', '!=', '<', '+', '-'",
			"expecting: 'or', ')'",
			"expecting: ',', ']'",
			"expecting: '.'",
			"expecting: '"'",
			"expecting: '''",
			"expecting: ')', id",
			"expecting: ')', '+', '-'",
			"expecting: tab, ',', ')', 'if', 'while', 'for', 'def', 'return', 'print', 'assert', 'import', 'from', id, EOF",
			"expecting: tab, ',', 'if', 'while', 'for', 'def', 'return', 'print', 'assert', 'import', 'from', id, EOF",
			"expecting: ',', ')', '+', '-'",
			"expecting: ')'",
			"expecting: ']', '+', '-'",
			"expecting: ',', ')', ']'",
			"expecting: ',', ')'",
			"expecting: tab, 'and', 'or', ':', ',', ')', '+', '-', 'if', 'while', 'for', 'def', 'return', 'print', 'assert', 'import', 'from', id, EOF",
			"expecting: ']'",
			"expecting: ':'",
			"expecting: ',', '=', ')'",
			"expecting: tab, ',', ')', '+', '-', 'if', 'while', 'for', 'def', 'return', 'print', 'assert', 'import', 'from', id, EOF",
			"expecting: '='",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 3, 4, 4, 2, 3, 3, 5, 6, 0, 0, 0, 0, 0, 7, 0, 1, 2, 2, 8, 9, 9, 10, 11, 11, 11, 11, 10, 12, 13, 14, 15, 10, 10, 10, 16, 9, 9, 9, 10, 10, 10, 17, 16, 18, 11, 4, 19, 20, 21, 22, 23, 3, 24, 3, 25, 4, 26, 4, 4, 4, 4, 4, 4, 0, 1, 2, 2, 3, 4, 4, 4, 0, 0, 7, 9, 27, 28, 29, 30, 4, 3, 8, 8, 31, 32, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 1, 2, 3, 4, 1, 3, 33, 34, 4, 35, 36, 0, 0, 3, 3, 36, 36, 36, 3, 3, 24, 3, 10, 37, 38, 39, 19, 16, 16, 18, 19, 20, 20, 4, 4, 10, 9, 8, 10, 40, 29, 34, 38, 41, 41, 10, 10, 15, 15, 42, 10, 10, 10, 10, 9, 0, 9, 10, 11, 43, 0, 44, 44, 38, 45, 46, 35, 23, 36, 36, 36, 23, 41, 10, 47, 1, 1, 3, 36, 0, 39, 19, 40, 10, 40, 10, 10, 10, 41, 10, 41, 10, 1, 1, 44, 3, 8, 41, 41, 41, 36, 3, 36, 36, 36, 4, 0, 0, 44, 47, 10, 10, 0, 0, 1, 45, 41, 41, 41, 23, 36, 36, 19, 1, 4, 0, 41, 36, 0, 19, 
        };*/
}
