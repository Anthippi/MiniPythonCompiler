/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AArgument extends PArgument
{
    private PIdentifier _identifier_;
    private PArgumentAssign _argumentAssign_;
    private final LinkedList _argumentAdditionalAssign_ = new TypedLinkedList(new ArgumentAdditionalAssign_Cast());

    public AArgument()
    {
    }

    public AArgument(
        PIdentifier _identifier_,
        PArgumentAssign _argumentAssign_,
        List _argumentAdditionalAssign_)
    {
        setIdentifier(_identifier_);

        setArgumentAssign(_argumentAssign_);

        {
            this._argumentAdditionalAssign_.clear();
            this._argumentAdditionalAssign_.addAll(_argumentAdditionalAssign_);
        }

    }
    public Object clone()
    {
        return new AArgument(
            (PIdentifier) cloneNode(_identifier_),
            (PArgumentAssign) cloneNode(_argumentAssign_),
            cloneList(_argumentAdditionalAssign_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArgument(this);
    }

    public PIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public PArgumentAssign getArgumentAssign()
    {
        return _argumentAssign_;
    }

    public void setArgumentAssign(PArgumentAssign node)
    {
        if(_argumentAssign_ != null)
        {
            _argumentAssign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _argumentAssign_ = node;
    }

    public LinkedList getArgumentAdditionalAssign()
    {
        return _argumentAdditionalAssign_;
    }

    public void setArgumentAdditionalAssign(List list)
    {
        _argumentAdditionalAssign_.clear();
        _argumentAdditionalAssign_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_identifier_)
            + toString(_argumentAssign_)
            + toString(_argumentAdditionalAssign_);
    }

    void removeChild(Node child)
    {
        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_argumentAssign_ == child)
        {
            _argumentAssign_ = null;
            return;
        }

        if(_argumentAdditionalAssign_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        if(_argumentAssign_ == oldChild)
        {
            setArgumentAssign((PArgumentAssign) newChild);
            return;
        }

        for(ListIterator i = _argumentAdditionalAssign_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class ArgumentAdditionalAssign_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PArgumentAdditionalAssign node = (PArgumentAdditionalAssign) o;

            if((node.parent() != null) &&
                (node.parent() != AArgument.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AArgument.this))
            {
                node.parent(AArgument.this);
            }

            return node;
        }
    }
}
