/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAGoal(AGoal node)
    {
        defaultCase(node);
    }

    public void caseAFuncFunctionOrStatement(AFuncFunctionOrStatement node)
    {
        defaultCase(node);
    }

    public void caseAStatFunctionOrStatement(AStatFunctionOrStatement node)
    {
        defaultCase(node);
    }

    public void caseAFunction(AFunction node)
    {
        defaultCase(node);
    }

    public void caseAArgument(AArgument node)
    {
        defaultCase(node);
    }

    public void caseAArgumentAssign(AArgumentAssign node)
    {
        defaultCase(node);
    }

    public void caseAArgumentAdditionalAssign(AArgumentAdditionalAssign node)
    {
        defaultCase(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        defaultCase(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssignStatement(AAssignStatement node)
    {
        defaultCase(node);
    }

    public void caseAArrayStatement(AArrayStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssertStatement(AAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssertComparisonStatement(AAssertComparisonStatement node)
    {
        defaultCase(node);
    }

    public void caseAFCallStatement(AFCallStatement node)
    {
        defaultCase(node);
    }

    public void caseAImportStatement(AImportStatement node)
    {
        defaultCase(node);
    }

    public void caseAEqAssignOpt(AEqAssignOpt node)
    {
        defaultCase(node);
    }

    public void caseAPlusEqAssignOpt(APlusEqAssignOpt node)
    {
        defaultCase(node);
    }

    public void caseAMinusEqAssignOpt(AMinusEqAssignOpt node)
    {
        defaultCase(node);
    }

    public void caseADivEqAssignOpt(ADivEqAssignOpt node)
    {
        defaultCase(node);
    }

    public void caseAMultEqAssignOpt(AMultEqAssignOpt node)
    {
        defaultCase(node);
    }

    public void caseAFactorExpression(AFactorExpression node)
    {
        defaultCase(node);
    }

    public void caseAAdditionExpression(AAdditionExpression node)
    {
        defaultCase(node);
    }

    public void caseASubtractionExpression(ASubtractionExpression node)
    {
        defaultCase(node);
    }

    public void caseAExponentFactor(AExponentFactor node)
    {
        defaultCase(node);
    }

    public void caseAMultFactor(AMultFactor node)
    {
        defaultCase(node);
    }

    public void caseADivFactor(ADivFactor node)
    {
        defaultCase(node);
    }

    public void caseAModFactor(AModFactor node)
    {
        defaultCase(node);
    }

    public void caseAExpressionOperatorsExponent(AExpressionOperatorsExponent node)
    {
        defaultCase(node);
    }

    public void caseAExponentExponent(AExponentExponent node)
    {
        defaultCase(node);
    }

    public void caseAValuePrimaryExpression(AValuePrimaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierPrimaryExpression(AIdentifierPrimaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAFCallPrimaryExpression(AFCallPrimaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAArrayIndexPrimaryExpression(AArrayIndexPrimaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAParenthPrimaryExpression(AParenthPrimaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryExpressionExpressionOperators(APrimaryExpressionExpressionOperators node)
    {
        defaultCase(node);
    }

    public void caseALengthExpressionOperators(ALengthExpressionOperators node)
    {
        defaultCase(node);
    }

    public void caseAAsciiExpressionOperators(AAsciiExpressionOperators node)
    {
        defaultCase(node);
    }

    public void caseAMaxExpressionOperators(AMaxExpressionOperators node)
    {
        defaultCase(node);
    }

    public void caseAMinExpressionOperators(AMinExpressionOperators node)
    {
        defaultCase(node);
    }

    public void caseAArrayExpressionOperators(AArrayExpressionOperators node)
    {
        defaultCase(node);
    }

    public void caseAImportImport(AImportImport node)
    {
        defaultCase(node);
    }

    public void caseAFromImport(AFromImport node)
    {
        defaultCase(node);
    }

    public void caseAImportAsIdentifier(AImportAsIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAImportAdditionalModule(AImportAdditionalModule node)
    {
        defaultCase(node);
    }

    public void caseAImportAdditionalFrom(AImportAdditionalFrom node)
    {
        defaultCase(node);
    }

    public void caseAModule(AModule node)
    {
        defaultCase(node);
    }

    public void caseAModuleDotIdentifier(AModuleDotIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAComparison(AComparison node)
    {
        defaultCase(node);
    }

    public void caseAOrComparison(AOrComparison node)
    {
        defaultCase(node);
    }

    public void caseAComparison2(AComparison2 node)
    {
        defaultCase(node);
    }

    public void caseAAndComparison2(AAndComparison2 node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryComparisonComparison3(APrimaryComparisonComparison3 node)
    {
        defaultCase(node);
    }

    public void caseANotComparison3(ANotComparison3 node)
    {
        defaultCase(node);
    }

    public void caseAExpressionPrimaryComparison(AExpressionPrimaryComparison node)
    {
        defaultCase(node);
    }

    public void caseATruePrimaryComparison(ATruePrimaryComparison node)
    {
        defaultCase(node);
    }

    public void caseAFalsePrimaryComparison(AFalsePrimaryComparison node)
    {
        defaultCase(node);
    }

    public void caseAParPrimaryComparison(AParPrimaryComparison node)
    {
        defaultCase(node);
    }

    public void caseAGreaterComparisonOpt(AGreaterComparisonOpt node)
    {
        defaultCase(node);
    }

    public void caseALessComparisonOpt(ALessComparisonOpt node)
    {
        defaultCase(node);
    }

    public void caseAGreaterEqualComparisonOpt(AGreaterEqualComparisonOpt node)
    {
        defaultCase(node);
    }

    public void caseALessEqualComparisonOpt(ALessEqualComparisonOpt node)
    {
        defaultCase(node);
    }

    public void caseAEqualComparisonOpt(AEqualComparisonOpt node)
    {
        defaultCase(node);
    }

    public void caseANotEqualComparisonOpt(ANotEqualComparisonOpt node)
    {
        defaultCase(node);
    }

    public void caseAFunctionCall(AFunctionCall node)
    {
        defaultCase(node);
    }

    public void caseAArglist(AArglist node)
    {
        defaultCase(node);
    }

    public void caseANumberValue(ANumberValue node)
    {
        defaultCase(node);
    }

    public void caseADqStringValue(ADqStringValue node)
    {
        defaultCase(node);
    }

    public void caseASqStringValue(ASqStringValue node)
    {
        defaultCase(node);
    }

    public void caseAFuncValue(AFuncValue node)
    {
        defaultCase(node);
    }

    public void caseANoneValue(ANoneValue node)
    {
        defaultCase(node);
    }

    public void caseANumber(ANumber node)
    {
        defaultCase(node);
    }

    public void caseAIdentifier(AIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAAdditionalExpression(AAdditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAAdditionalValue(AAdditionalValue node)
    {
        defaultCase(node);
    }

    public void caseTTab(TTab node)
    {
        defaultCase(node);
    }

    public void caseTWhitespace(TWhitespace node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTComa(TComa node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTLeftParenthesis(TLeftParenthesis node)
    {
        defaultCase(node);
    }

    public void caseTRightParenthesis(TRightParenthesis node)
    {
        defaultCase(node);
    }

    public void caseTLeftBracket(TLeftBracket node)
    {
        defaultCase(node);
    }

    public void caseTRightBracket(TRightBracket node)
    {
        defaultCase(node);
    }

    public void caseTGreaterThan(TGreaterThan node)
    {
        defaultCase(node);
    }

    public void caseTLessEqual(TLessEqual node)
    {
        defaultCase(node);
    }

    public void caseTGreaterEqual(TGreaterEqual node)
    {
        defaultCase(node);
    }

    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    public void caseTNotEqual(TNotEqual node)
    {
        defaultCase(node);
    }

    public void caseTLessThan(TLessThan node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTTimes(TTimes node)
    {
        defaultCase(node);
    }

    public void caseTDivide(TDivide node)
    {
        defaultCase(node);
    }

    public void caseTModulo(TModulo node)
    {
        defaultCase(node);
    }

    public void caseTPower(TPower node)
    {
        defaultCase(node);
    }

    public void caseTMinusEqual(TMinusEqual node)
    {
        defaultCase(node);
    }

    public void caseTDivideEqual(TDivideEqual node)
    {
        defaultCase(node);
    }

    public void caseTPlusEqual(TPlusEqual node)
    {
        defaultCase(node);
    }

    public void caseTMultEqual(TMultEqual node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTNone(TNone node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTDef(TDef node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTAssert(TAssert node)
    {
        defaultCase(node);
    }

    public void caseTLen(TLen node)
    {
        defaultCase(node);
    }

    public void caseTAscii(TAscii node)
    {
        defaultCase(node);
    }

    public void caseTMax(TMax node)
    {
        defaultCase(node);
    }

    public void caseTMin(TMin node)
    {
        defaultCase(node);
    }

    public void caseTTkImport(TTkImport node)
    {
        defaultCase(node);
    }

    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTNum(TNum node)
    {
        defaultCase(node);
    }

    public void caseTCommentStart(TCommentStart node)
    {
        defaultCase(node);
    }

    public void caseTCommentText(TCommentText node)
    {
        defaultCase(node);
    }

    public void caseTEndComment(TEndComment node)
    {
        defaultCase(node);
    }

    public void caseTDoubleQuote(TDoubleQuote node)
    {
        defaultCase(node);
    }

    public void caseTSingleQuote(TSingleQuote node)
    {
        defaultCase(node);
    }

    public void caseTStringLiteralD(TStringLiteralD node)
    {
        defaultCase(node);
    }

    public void caseTStringLiteralS(TStringLiteralS node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
