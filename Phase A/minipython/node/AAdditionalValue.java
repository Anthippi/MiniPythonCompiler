/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AAdditionalValue extends PAdditionalValue
{
    private TComa _coma_;
    private PValue _value_;

    public AAdditionalValue()
    {
    }

    public AAdditionalValue(
        TComa _coma_,
        PValue _value_)
    {
        setComa(_coma_);

        setValue(_value_);

    }
    public Object clone()
    {
        return new AAdditionalValue(
            (TComa) cloneNode(_coma_),
            (PValue) cloneNode(_value_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAdditionalValue(this);
    }

    public TComa getComa()
    {
        return _coma_;
    }

    public void setComa(TComa node)
    {
        if(_coma_ != null)
        {
            _coma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _coma_ = node;
    }

    public PValue getValue()
    {
        return _value_;
    }

    public void setValue(PValue node)
    {
        if(_value_ != null)
        {
            _value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _value_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_coma_)
            + toString(_value_);
    }

    void removeChild(Node child)
    {
        if(_coma_ == child)
        {
            _coma_ = null;
            return;
        }

        if(_value_ == child)
        {
            _value_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_coma_ == oldChild)
        {
            setComa((TComa) newChild);
            return;
        }

        if(_value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

    }
}
