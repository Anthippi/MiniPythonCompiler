/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AArgumentAdditionalAssign extends PArgumentAdditionalAssign
{
    private TComa _coma_;
    private PIdentifier _identifier_;
    private PArgumentAssign _argumentAssign_;

    public AArgumentAdditionalAssign()
    {
    }

    public AArgumentAdditionalAssign(
        TComa _coma_,
        PIdentifier _identifier_,
        PArgumentAssign _argumentAssign_)
    {
        setComa(_coma_);

        setIdentifier(_identifier_);

        setArgumentAssign(_argumentAssign_);

    }
    public Object clone()
    {
        return new AArgumentAdditionalAssign(
            (TComa) cloneNode(_coma_),
            (PIdentifier) cloneNode(_identifier_),
            (PArgumentAssign) cloneNode(_argumentAssign_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArgumentAdditionalAssign(this);
    }

    public TComa getComa()
    {
        return _coma_;
    }

    public void setComa(TComa node)
    {
        if(_coma_ != null)
        {
            _coma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _coma_ = node;
    }

    public PIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public PArgumentAssign getArgumentAssign()
    {
        return _argumentAssign_;
    }

    public void setArgumentAssign(PArgumentAssign node)
    {
        if(_argumentAssign_ != null)
        {
            _argumentAssign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _argumentAssign_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_coma_)
            + toString(_identifier_)
            + toString(_argumentAssign_);
    }

    void removeChild(Node child)
    {
        if(_coma_ == child)
        {
            _coma_ = null;
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_argumentAssign_ == child)
        {
            _argumentAssign_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_coma_ == oldChild)
        {
            setComa((TComa) newChild);
            return;
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        if(_argumentAssign_ == oldChild)
        {
            setArgumentAssign((PArgumentAssign) newChild);
            return;
        }

    }
}
