/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AArrayExpressionOperators extends PExpressionOperators
{
    private TLeftBracket _leftBracket_;
    private PValue _value_;
    private final LinkedList _additionalValue_ = new TypedLinkedList(new AdditionalValue_Cast());
    private TRightBracket _rightBracket_;

    public AArrayExpressionOperators()
    {
    }

    public AArrayExpressionOperators(
        TLeftBracket _leftBracket_,
        PValue _value_,
        List _additionalValue_,
        TRightBracket _rightBracket_)
    {
        setLeftBracket(_leftBracket_);

        setValue(_value_);

        {
            this._additionalValue_.clear();
            this._additionalValue_.addAll(_additionalValue_);
        }

        setRightBracket(_rightBracket_);

    }
    public Object clone()
    {
        return new AArrayExpressionOperators(
            (TLeftBracket) cloneNode(_leftBracket_),
            (PValue) cloneNode(_value_),
            cloneList(_additionalValue_),
            (TRightBracket) cloneNode(_rightBracket_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayExpressionOperators(this);
    }

    public TLeftBracket getLeftBracket()
    {
        return _leftBracket_;
    }

    public void setLeftBracket(TLeftBracket node)
    {
        if(_leftBracket_ != null)
        {
            _leftBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _leftBracket_ = node;
    }

    public PValue getValue()
    {
        return _value_;
    }

    public void setValue(PValue node)
    {
        if(_value_ != null)
        {
            _value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _value_ = node;
    }

    public LinkedList getAdditionalValue()
    {
        return _additionalValue_;
    }

    public void setAdditionalValue(List list)
    {
        _additionalValue_.clear();
        _additionalValue_.addAll(list);
    }

    public TRightBracket getRightBracket()
    {
        return _rightBracket_;
    }

    public void setRightBracket(TRightBracket node)
    {
        if(_rightBracket_ != null)
        {
            _rightBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rightBracket_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_leftBracket_)
            + toString(_value_)
            + toString(_additionalValue_)
            + toString(_rightBracket_);
    }

    void removeChild(Node child)
    {
        if(_leftBracket_ == child)
        {
            _leftBracket_ = null;
            return;
        }

        if(_value_ == child)
        {
            _value_ = null;
            return;
        }

        if(_additionalValue_.remove(child))
        {
            return;
        }

        if(_rightBracket_ == child)
        {
            _rightBracket_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_leftBracket_ == oldChild)
        {
            setLeftBracket((TLeftBracket) newChild);
            return;
        }

        if(_value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        for(ListIterator i = _additionalValue_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_rightBracket_ == oldChild)
        {
            setRightBracket((TRightBracket) newChild);
            return;
        }

    }

    private class AdditionalValue_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PAdditionalValue node = (PAdditionalValue) o;

            if((node.parent() != null) &&
                (node.parent() != AArrayExpressionOperators.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AArrayExpressionOperators.this))
            {
                node.parent(AArrayExpressionOperators.this);
            }

            return node;
        }
    }
}
