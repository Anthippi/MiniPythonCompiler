/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAGoal(AGoal node);
    void caseAFuncFunctionOrStatement(AFuncFunctionOrStatement node);
    void caseAStatFunctionOrStatement(AStatFunctionOrStatement node);
    void caseAFunction(AFunction node);
    void caseAArgument(AArgument node);
    void caseAArgumentAssign(AArgumentAssign node);
    void caseAArgumentAdditionalAssign(AArgumentAdditionalAssign node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAForStatement(AForStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAPrintStatement(APrintStatement node);
    void caseAAssignStatement(AAssignStatement node);
    void caseAArrayStatement(AArrayStatement node);
    void caseAAssertStatement(AAssertStatement node);
    void caseAAssertComparisonStatement(AAssertComparisonStatement node);
    void caseAFCallStatement(AFCallStatement node);
    void caseAImportStatement(AImportStatement node);
    void caseAEqAssignOpt(AEqAssignOpt node);
    void caseAPlusEqAssignOpt(APlusEqAssignOpt node);
    void caseAMinusEqAssignOpt(AMinusEqAssignOpt node);
    void caseADivEqAssignOpt(ADivEqAssignOpt node);
    void caseAMultEqAssignOpt(AMultEqAssignOpt node);
    void caseAFactorExpression(AFactorExpression node);
    void caseAAdditionExpression(AAdditionExpression node);
    void caseASubtractionExpression(ASubtractionExpression node);
    void caseAExponentFactor(AExponentFactor node);
    void caseAMultFactor(AMultFactor node);
    void caseADivFactor(ADivFactor node);
    void caseAModFactor(AModFactor node);
    void caseAExpressionOperatorsExponent(AExpressionOperatorsExponent node);
    void caseAExponentExponent(AExponentExponent node);
    void caseAValuePrimaryExpression(AValuePrimaryExpression node);
    void caseAIdentifierPrimaryExpression(AIdentifierPrimaryExpression node);
    void caseAFCallPrimaryExpression(AFCallPrimaryExpression node);
    void caseAArrayIndexPrimaryExpression(AArrayIndexPrimaryExpression node);
    void caseAParenthPrimaryExpression(AParenthPrimaryExpression node);
    void caseAPrimaryExpressionExpressionOperators(APrimaryExpressionExpressionOperators node);
    void caseALengthExpressionOperators(ALengthExpressionOperators node);
    void caseAAsciiExpressionOperators(AAsciiExpressionOperators node);
    void caseAMaxExpressionOperators(AMaxExpressionOperators node);
    void caseAMinExpressionOperators(AMinExpressionOperators node);
    void caseAArrayExpressionOperators(AArrayExpressionOperators node);
    void caseAImportImport(AImportImport node);
    void caseAFromImport(AFromImport node);
    void caseAImportAsIdentifier(AImportAsIdentifier node);
    void caseAImportAdditionalModule(AImportAdditionalModule node);
    void caseAImportAdditionalFrom(AImportAdditionalFrom node);
    void caseAModule(AModule node);
    void caseAModuleDotIdentifier(AModuleDotIdentifier node);
    void caseAComparison(AComparison node);
    void caseAOrComparison(AOrComparison node);
    void caseAComparison2(AComparison2 node);
    void caseAAndComparison2(AAndComparison2 node);
    void caseAPrimaryComparisonComparison3(APrimaryComparisonComparison3 node);
    void caseANotComparison3(ANotComparison3 node);
    void caseAExpressionPrimaryComparison(AExpressionPrimaryComparison node);
    void caseATruePrimaryComparison(ATruePrimaryComparison node);
    void caseAFalsePrimaryComparison(AFalsePrimaryComparison node);
    void caseAParPrimaryComparison(AParPrimaryComparison node);
    void caseAGreaterComparisonOpt(AGreaterComparisonOpt node);
    void caseALessComparisonOpt(ALessComparisonOpt node);
    void caseAGreaterEqualComparisonOpt(AGreaterEqualComparisonOpt node);
    void caseALessEqualComparisonOpt(ALessEqualComparisonOpt node);
    void caseAEqualComparisonOpt(AEqualComparisonOpt node);
    void caseANotEqualComparisonOpt(ANotEqualComparisonOpt node);
    void caseAFunctionCall(AFunctionCall node);
    void caseAArglist(AArglist node);
    void caseANumberValue(ANumberValue node);
    void caseADqStringValue(ADqStringValue node);
    void caseASqStringValue(ASqStringValue node);
    void caseAFuncValue(AFuncValue node);
    void caseANoneValue(ANoneValue node);
    void caseANumber(ANumber node);
    void caseAIdentifier(AIdentifier node);
    void caseAAdditionalExpression(AAdditionalExpression node);
    void caseAAdditionalValue(AAdditionalValue node);

    void caseTTab(TTab node);
    void caseTWhitespace(TWhitespace node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTColon(TColon node);
    void caseTComa(TComa node);
    void caseTDot(TDot node);
    void caseTAssign(TAssign node);
    void caseTLeftParenthesis(TLeftParenthesis node);
    void caseTRightParenthesis(TRightParenthesis node);
    void caseTLeftBracket(TLeftBracket node);
    void caseTRightBracket(TRightBracket node);
    void caseTGreaterThan(TGreaterThan node);
    void caseTLessEqual(TLessEqual node);
    void caseTGreaterEqual(TGreaterEqual node);
    void caseTEqual(TEqual node);
    void caseTNotEqual(TNotEqual node);
    void caseTLessThan(TLessThan node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTTimes(TTimes node);
    void caseTDivide(TDivide node);
    void caseTModulo(TModulo node);
    void caseTPower(TPower node);
    void caseTMinusEqual(TMinusEqual node);
    void caseTDivideEqual(TDivideEqual node);
    void caseTPlusEqual(TPlusEqual node);
    void caseTMultEqual(TMultEqual node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTNone(TNone node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTDef(TDef node);
    void caseTReturn(TReturn node);
    void caseTPrint(TPrint node);
    void caseTIn(TIn node);
    void caseTAssert(TAssert node);
    void caseTLen(TLen node);
    void caseTAscii(TAscii node);
    void caseTMax(TMax node);
    void caseTMin(TMin node);
    void caseTTkImport(TTkImport node);
    void caseTAs(TAs node);
    void caseTFrom(TFrom node);
    void caseTId(TId node);
    void caseTNum(TNum node);
    void caseTCommentStart(TCommentStart node);
    void caseTCommentText(TCommentText node);
    void caseTEndComment(TEndComment node);
    void caseTDoubleQuote(TDoubleQuote node);
    void caseTSingleQuote(TSingleQuote node);
    void caseTStringLiteralD(TStringLiteralD node);
    void caseTStringLiteralS(TStringLiteralS node);
    void caseEOF(EOF node);
}
