/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AAsciiExpressionOperators extends PExpressionOperators
{
    private TAscii _ascii_;
    private TLeftParenthesis _leftParenthesis_;
    private PIdentifier _identifier_;
    private TRightParenthesis _rightParenthesis_;

    public AAsciiExpressionOperators()
    {
    }

    public AAsciiExpressionOperators(
        TAscii _ascii_,
        TLeftParenthesis _leftParenthesis_,
        PIdentifier _identifier_,
        TRightParenthesis _rightParenthesis_)
    {
        setAscii(_ascii_);

        setLeftParenthesis(_leftParenthesis_);

        setIdentifier(_identifier_);

        setRightParenthesis(_rightParenthesis_);

    }
    public Object clone()
    {
        return new AAsciiExpressionOperators(
            (TAscii) cloneNode(_ascii_),
            (TLeftParenthesis) cloneNode(_leftParenthesis_),
            (PIdentifier) cloneNode(_identifier_),
            (TRightParenthesis) cloneNode(_rightParenthesis_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAsciiExpressionOperators(this);
    }

    public TAscii getAscii()
    {
        return _ascii_;
    }

    public void setAscii(TAscii node)
    {
        if(_ascii_ != null)
        {
            _ascii_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _ascii_ = node;
    }

    public TLeftParenthesis getLeftParenthesis()
    {
        return _leftParenthesis_;
    }

    public void setLeftParenthesis(TLeftParenthesis node)
    {
        if(_leftParenthesis_ != null)
        {
            _leftParenthesis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _leftParenthesis_ = node;
    }

    public PIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public TRightParenthesis getRightParenthesis()
    {
        return _rightParenthesis_;
    }

    public void setRightParenthesis(TRightParenthesis node)
    {
        if(_rightParenthesis_ != null)
        {
            _rightParenthesis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rightParenthesis_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_ascii_)
            + toString(_leftParenthesis_)
            + toString(_identifier_)
            + toString(_rightParenthesis_);
    }

    void removeChild(Node child)
    {
        if(_ascii_ == child)
        {
            _ascii_ = null;
            return;
        }

        if(_leftParenthesis_ == child)
        {
            _leftParenthesis_ = null;
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_rightParenthesis_ == child)
        {
            _rightParenthesis_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_ascii_ == oldChild)
        {
            setAscii((TAscii) newChild);
            return;
        }

        if(_leftParenthesis_ == oldChild)
        {
            setLeftParenthesis((TLeftParenthesis) newChild);
            return;
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        if(_rightParenthesis_ == oldChild)
        {
            setRightParenthesis((TRightParenthesis) newChild);
            return;
        }

    }
}
